[{"content":"The lambda calculus is a foundational mathematical framework for studying functions. It forms the bedrock of functional programming, offering a powerful and elegant way to define and manipulate functions. Emacs Lisp, a dialect of Lisp heavily used within the Emacs editor, offers a flexible environment for exploring these concepts.\nIn this article, we\u0026rsquo;ll embark on a journey to understand how the lambda calculus is expressed within Emacs Lisp, using illustrative examples to highlight the core concepts.\nFunctions as Lambda Expressions Let\u0026rsquo;s begin by considering a simple function that adds 3 to a given number:\n(let ((x 20)) (+ x 3)) This code defines a function using the let construct, binding the variable x to the value 20 and then performing the addition. We can rewrite this using a lambda expression, a core construct of the lambda calculus:\n((lambda (x) (+ x 3)) 20) Here, we define a lambda function (lambda (x) (+ x 3)), which takes a single argument x and returns the result of adding 3 to it. The argument 20 is then passed to this function, yielding the same result as the previous let expression.\nNested Lambdas: Simulating let* The let* construct in Emacs Lisp allows for sequential binding of variables, where each subsequent variable can refer to previously defined ones. Let\u0026rsquo;s consider an example:\n(let* ((x 20) (y x) ) x) This code first binds x to 20 and then binds y to the value of x. It then returns the value of x. We can mimic this behavior with nested lambda functions:\n((lambda (x) ((lambda (y) x) x)) 20) The outer lambda binds x to 20. The inner lambda binds y to the value of x but ultimately returns the value of x, demonstrating that the binding of y doesn\u0026rsquo;t affect the result.\nCurrying: A Functional Approach The nested lambda functions used above hint at a core concept in functional programming: currying. Currying transforms a function that takes multiple arguments into a series of functions, each taking a single argument. While not strictly currying, the nested lambda functions in the previous example illustrate a similar approach.\nThe outer lambda takes the first argument (x) and then returns the inner lambda, which takes the second argument (y). While the inner lambda in this example ignores the value of y, currying allows us to build up functions incrementally, one argument at a time.\nConclusion Exploring the lambda calculus within Emacs Lisp provides valuable insights into the functional programming paradigm. By understanding how lambda expressions work and how they can be used to express concepts like let*, we gain a deeper understanding of the power and elegance of functional programming. As you continue your journey through the world of functional programming, remember that the lambda calculus is a potent tool, offering a unique and powerful way to represent and manipulate functions.\n","permalink":"http://localhost:1313/posts/expressing-lambda-calculus-in-emacs-lisp/","summary":"\u003cp\u003eThe lambda calculus is a foundational mathematical framework for studying functions. It forms the bedrock of functional programming, offering a powerful and elegant way to define and manipulate functions. Emacs Lisp, a dialect of Lisp heavily used within the Emacs editor, offers a flexible environment for exploring these concepts.\u003c/p\u003e\n\u003cp\u003eIn this article, we\u0026rsquo;ll embark on a journey to understand how the lambda calculus is expressed within Emacs Lisp, using illustrative examples to highlight the core concepts.\u003c/p\u003e","title":"Expressing Lambda Calculus in Emacs Lisp"},{"content":"Overview Endo can be used as a form of composition by concating functions. In this concatination functions results are fed into the concatted function.\nThe value is fed into Endo\u0026rsquo;s run function providing opportunities for lazy operations.\nI\u0026rsquo;m purposely being extremely explicit because I make to make sure that I understand each step of these functional implementations. ## Examples\nExample 1 // Endo monoid declaration // Endo :: (a -\u0026gt; a) -\u0026gt; Endo a const Endo = run =\u0026gt; ({ run, // concat :: Endo a -\u0026gt; Endo a -\u0026gt; Endo a concat: other =\u0026gt; Endo(x =\u0026gt; run(other.run(x))) }) // Endo.empty :: () -\u0026gt; Endo a Endo.empty = () =\u0026gt; Endo(x =\u0026gt; x) // List monad for putting functions into a list. // List :: [a] -\u0026gt; List a const List = list =\u0026gt; ({ list, // map :: (a -\u0026gt; b) -\u0026gt; List a -\u0026gt; List b map: fn =\u0026gt; List(list.map(fn)), // fold :: ((b, a) -\u0026gt; b, b) -\u0026gt; List a -\u0026gt; List b fold: (fn, initialValue) =\u0026gt; List(list.reduce(fn, initialValue)), // foldMap :: (a -\u0026gt; b) -\u0026gt; b -\u0026gt; List a -\u0026gt; b foldMap: (monoid, empty) =\u0026gt; { return empty != null ? list.reduce((acc, x, i) =\u0026gt; acc.concat(monoid(x, i)), empty) : list.map(monoid).reduce((acc, x) =\u0026gt; acc.concat(x)) }, // extract :: () -\u0026gt; [a] extract: () =\u0026gt; list, }) // Utility functions // compose :: (b -\u0026gt; c) -\u0026gt; (a -\u0026gt; b) -\u0026gt; a -\u0026gt; c const compose = f =\u0026gt; g =\u0026gt; x =\u0026gt; f(g(x)) // curry :: ((a, b) -\u0026gt; c) -\u0026gt; a -\u0026gt; b -\u0026gt; c const curry = f =\u0026gt; a =\u0026gt; b =\u0026gt; f(a, b) // toUpper :: String -\u0026gt; String const toUpper = str =\u0026gt; str.toUpperCase() // exclaim :: String -\u0026gt; String const exclaim = str =\u0026gt; `${str}!!` // to OrgHeader :: String -\u0026gt; String const toOrgHeader = str =\u0026gt; `* ${str}` // toOrgTagList :: [String] -\u0026gt; String const toOrgTagList = xs =\u0026gt; List(xs) .map((tag, index) =\u0026gt; !index ? `:${tag}:` : `${tag}:` ) .fold((accumalator,tag, index) =\u0026gt; accumalator.concat(tag) ,\u0026#39;\u0026#39;) .extract() // Tag list for header const tags = [\u0026#39;javascript\u0026#39;, \u0026#39;completed\u0026#39;, \u0026#39;moved\u0026#39;] // addTagsToHeader :: [String] -\u0026gt; String -\u0026gt; String const addTagsToHeader = curry((tagList,str) =\u0026gt; `${str} ${tagList}`) console.log(addTagsToHeader(toOrgTagList(tags))(\u0026#34;A Header\u0026#34;)) const result = List([addTagsToHeader(toOrgTagList(tags)),toOrgHeader, toUpper, exclaim]).foldMap(Endo, Endo.empty(\u0026#39;\u0026#39;)).run(\u0026#39;hello\u0026#39;) //\u0026gt; A Header :javascript:completed:moved: console.log(result) //\u0026gt; HELLO!! :javascript:completed:moved: ","permalink":"http://localhost:1313/posts/endo-monoid/","summary":"\u003ch2 id=\"overview\"\u003eOverview\u003c/h2\u003e\n\u003cp\u003eEndo can be used as a form of composition by concating functions. In this concatination functions results are fed into the concatted function.\u003c/p\u003e\n\u003cp\u003eThe value is fed into Endo\u0026rsquo;s run function providing opportunities for lazy operations.\u003c/p\u003e\n\u003cp\u003eI\u0026rsquo;m purposely being extremely explicit because I make to make sure that I understand each step of these functional implementations.\n## Examples\u003c/p\u003e\n\u003ch4 id=\"example-1\"\u003eExample 1\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Endo monoid declaration\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Endo :: (a -\u0026gt; a) -\u0026gt; Endo a\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eEndo\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003erun\u003c/span\u003e =\u0026gt; ({\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003erun\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// concat :: Endo a -\u0026gt; Endo a -\u0026gt; Endo a\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#a6e22e\"\u003econcat\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eother\u003c/span\u003e =\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eEndo\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003erun\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eother\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003erun\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Endo.empty :: () -\u0026gt; Endo a\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eEndo\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eempty\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e () =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003eEndo\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// List monad for putting functions into a list.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// List :: [a] -\u0026gt; List a\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eList\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e =\u0026gt; ({\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// map :: (a -\u0026gt; b) -\u0026gt; List a -\u0026gt; List b\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#a6e22e\"\u003emap\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efn\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003eList\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003emap\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003efn\u003c/span\u003e)),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// fold :: ((b, a) -\u0026gt; b, b) -\u0026gt; List a -\u0026gt; List b\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#a6e22e\"\u003efold\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003efn\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003einitialValue\u003c/span\u003e) =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003eList\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ereduce\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003efn\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003einitialValue\u003c/span\u003e)),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// foldMap :: (a -\u0026gt; b) -\u0026gt; b -\u0026gt; List a -\u0026gt; b\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#a6e22e\"\u003efoldMap\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003emonoid\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eempty\u003c/span\u003e) =\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eempty\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ereduce\u003c/span\u003e((\u003cspan style=\"color:#a6e22e\"\u003eacc\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e) =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003eacc\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003econcat\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003emonoid\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e)), \u003cspan style=\"color:#a6e22e\"\u003eempty\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003emap\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003emonoid\u003c/span\u003e).\u003cspan style=\"color:#a6e22e\"\u003ereduce\u003c/span\u003e((\u003cspan style=\"color:#a6e22e\"\u003eacc\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e) =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003eacc\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003econcat\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e))      },\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// extract :: () -\u0026gt; [a]\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#a6e22e\"\u003eextract\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e () =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Utility functions\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// compose :: (b -\u0026gt; c) -\u0026gt; (a -\u0026gt; b) -\u0026gt; a -\u0026gt; c\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecompose\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003eg\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eg\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// curry :: ((a, b) -\u0026gt; c) -\u0026gt; a -\u0026gt; b -\u0026gt; c\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecurry\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// toUpper :: String -\u0026gt; String\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etoUpper\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estr\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003estr\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003etoUpperCase\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// exclaim :: String -\u0026gt; String\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eexclaim\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estr\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#e6db74\"\u003e`\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003estr\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e!!`\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// to OrgHeader :: String -\u0026gt; String\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etoOrgHeader\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estr\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#e6db74\"\u003e`* \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003estr\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e`\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// toOrgTagList :: [String] -\u0026gt; String\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etoOrgTagList\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003exs\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003eList\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003exs\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      .\u003cspan style=\"color:#a6e22e\"\u003emap\u003c/span\u003e((\u003cspan style=\"color:#a6e22e\"\u003etag\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eindex\u003c/span\u003e) =\u0026gt; \u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eindex\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e`:\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003etag\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e:`\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e`\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003etag\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e:`\u003c/span\u003e )\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      .\u003cspan style=\"color:#a6e22e\"\u003efold\u003c/span\u003e((\u003cspan style=\"color:#a6e22e\"\u003eaccumalator\u003c/span\u003e,\u003cspan style=\"color:#a6e22e\"\u003etag\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eindex\u003c/span\u003e) =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003eaccumalator\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003econcat\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003etag\u003c/span\u003e) ,\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      .\u003cspan style=\"color:#a6e22e\"\u003eextract\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Tag list for header\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etags\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e [\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;javascript\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;completed\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;moved\u0026#39;\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// addTagsToHeader :: [String] -\u0026gt; String -\u0026gt; String\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eaddTagsToHeader\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#a6e22e\"\u003ecurry\u003c/span\u003e((\u003cspan style=\"color:#a6e22e\"\u003etagList\u003c/span\u003e,\u003cspan style=\"color:#a6e22e\"\u003estr\u003c/span\u003e) =\u0026gt; \u003cspan style=\"color:#e6db74\"\u003e`\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003estr\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003etagList\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e`\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003econsole\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eaddTagsToHeader\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003etoOrgTagList\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003etags\u003c/span\u003e))(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;A Header\u0026#34;\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eresult\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eList\u003c/span\u003e([\u003cspan style=\"color:#a6e22e\"\u003eaddTagsToHeader\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003etoOrgTagList\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003etags\u003c/span\u003e)),\u003cspan style=\"color:#a6e22e\"\u003etoOrgHeader\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003etoUpper\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eexclaim\u003c/span\u003e]).\u003cspan style=\"color:#a6e22e\"\u003efoldMap\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eEndo\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eEndo\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eempty\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e)).\u003cspan style=\"color:#a6e22e\"\u003erun\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;hello\u0026#39;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e//\u0026gt; A Header :javascript:completed:moved:\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003econsole\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eresult\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e//\u0026gt; HELLO!! :javascript:completed:moved:\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"The Endo Monoid"},{"content":"Overview This is essential a map of content for functional programming concepts that I\u0026rsquo;m learning.\nList Monad ","permalink":"http://localhost:1313/posts/functional-programming/","summary":"\u003ch2 id=\"overview\"\u003eOverview\u003c/h2\u003e\n\u003cp\u003eThis is essential a map of content for functional programming concepts that I\u0026rsquo;m learning.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"/posts/list-monad/\"\u003eList Monad\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","title":"Functional Programming Concepts"},{"content":"Thoughts I\u0026rsquo;m writing this more as a way to document and organize my thoughts around the list monad.\nThis is a very important monad.\nA map of functional concepts I\u0026rsquo;m currently studying can be found at Functional Programming Concepts.\nThe Code export const List = list =\u0026gt; ({ list, map: fn =\u0026gt; List(list.map(fn)), fold: (fn, initialValue) =\u0026gt; List(list.reduce(fn, initialValue)), foldMap(monoid, empty) { const mappedList = list.reduce(fn, initialValue); const result = mappedList.reduce( (accumalator, monoidValue) =\u0026gt; accumalator.concat(monoidValue), empty, ); return List(result); }, extract: () =\u0026gt; list, }); Example Here is a sample implementation of this list monad.\nList([1, 2, 3, 4]).map(x =\u0026gt; x + 1) //\u0026gt; [2,3,4,5] List([\u0026#34;red\u0026#34;, \u0026#34;Blue\u0026#34;, \u0026#34;Yellow\u0026#34;, \u0026#34;Green\u0026#34;]).(str =\u0026gt; str.toUpperCase()) //\u0026gt; [\u0026#34;RED\u0026#34;, \u0026#34;BLUE\u0026#34;, \u0026#34;YELLOW\u0026#34;, \u0026#34;GREEN\u0026#34;] Github A current version of my implementation of this list monad can be found here.\n","permalink":"http://localhost:1313/posts/list-monad/","summary":"\u003ch2 id=\"thoughts\"\u003eThoughts\u003c/h2\u003e\n\u003cp\u003eI\u0026rsquo;m writing this more as a way to document and organize my thoughts around the list monad.\u003c/p\u003e\n\u003cp\u003eThis is a very important monad.\u003c/p\u003e\n\u003cp\u003eA map of functional concepts I\u0026rsquo;m currently studying can be found at \u003ca href=\"/posts/functional-programming/\"\u003eFunctional Programming Concepts\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"the-code\"\u003eThe Code\u003c/h2\u003e\n\u003cp\u003e\u003ca id=\"code-snippet--list-monad\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eexport\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eList\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e =\u0026gt; ({\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003emap\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efn\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003eList\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003emap\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003efn\u003c/span\u003e)),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003efold\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003efn\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003einitialValue\u003c/span\u003e) =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003eList\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ereduce\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003efn\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003einitialValue\u003c/span\u003e)),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003efoldMap\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003emonoid\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eempty\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emappedList\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ereduce\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003efn\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003einitialValue\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eresult\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emappedList\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ereduce\u003c/span\u003e(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      (\u003cspan style=\"color:#a6e22e\"\u003eaccumalator\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003emonoidValue\u003c/span\u003e) =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003eaccumalator\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003econcat\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003emonoidValue\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#a6e22e\"\u003eempty\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    );\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eList\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eresult\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  },\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003eextract\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e () =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e});\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"example\"\u003eExample\u003c/h3\u003e\n\u003cp\u003eHere is a sample implementation of this list monad.\u003c/p\u003e","title":"List Monad in JavaScript"},{"content":"Introduction Emacs Capture Templates Org-Roam Browser Browser Options Capture Templates ","permalink":"http://localhost:1313/posts/my-zettelkasten-workflow/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003ch2 id=\"emacs\"\u003eEmacs\u003c/h2\u003e\n\u003ch3 id=\"capture-templates\"\u003eCapture Templates\u003c/h3\u003e\n\u003ch2 id=\"org-roam\"\u003eOrg-Roam\u003c/h2\u003e\n\u003ch2 id=\"browser\"\u003eBrowser\u003c/h2\u003e\n\u003ch3 id=\"browser-options\"\u003eBrowser Options\u003c/h3\u003e\n\u003ch3 id=\"capture-templates\"\u003eCapture Templates\u003c/h3\u003e","title":"My Zettelkasten Workflow"},{"content":"Writing Lisp Code is Easy However good Lisp programming is hard according to Richard P. Gabriel. Lisp is extremely hackable It\u0026rsquo;s easy to create a Lisp Language It\u0026rsquo;s Easy to Make a Lisp Language Domain Specific Writing a parser and compiler for Lisp is way claner than other languages Emacs is configured with Lisp Lisp Helps Me with My Programmatic Thinking Once you know Lisp you think of programming in a very different way. Lisp has heavy ties to Functional Programming My interested in mathematics has motivated my interest in functional programming. A lot of functional programming ideas implemented in other programming languages started in Lisp. A lot of academic computer science work uses Lisp. Common Lisp\u0026rsquo;s Object-Oriented System is Great Development of programs in Lisp advance faster then in other languages Its easy to build a prototype of an idea in Lisp.\nMany programms have started as Emacs packages.\nThe discretionary exportable functionality entrusted to the individual Lisp programmer is more than an order of magnitude greater than that to be found within Pascal enterprises. - Alan J. Perlis\nDevelopment of programs in Lisp proceeds somewhere between 1000 and 5000 times faster then development in \u0026ldquo;modern\u0026rdquo; or \u0026ldquo;improved\u0026rdquo; computer languages. - Douglas Lenat Lex Fridman Podcast\nYou can hire fewer people, by 80%, by developing in Lisp. - Eric Normand\nYou don\u0026rsquo;t need a lot of dependencies to get your project off in Lisp\n","permalink":"http://localhost:1313/posts/why-lisp/","summary":"\u003ch2 id=\"writing-lisp-code-is-easy\"\u003eWriting Lisp Code is Easy\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHowever good Lisp programming is hard according to Richard P. Gabriel.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"lisp-is-extremely-hackable\"\u003eLisp is extremely hackable\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eIt\u0026rsquo;s easy to create a Lisp Language\u003c/li\u003e\n\u003cli\u003eIt\u0026rsquo;s Easy to Make a Lisp Language Domain Specific\u003c/li\u003e\n\u003cli\u003eWriting a parser and compiler for Lisp is way claner than other languages\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"emacs-is-configured-with-lisp\"\u003eEmacs is configured with Lisp\u003c/h2\u003e\n\u003ch2 id=\"lisp-helps-me-with-my-programmatic-thinking\"\u003eLisp Helps Me with My Programmatic Thinking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOnce you know Lisp you think of programming in a very different way.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"lisp-has-heavy-ties-to-functional-programming\"\u003eLisp has heavy ties to Functional Programming\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eMy interested in mathematics has motivated my interest in functional programming.\u003c/li\u003e\n\u003cli\u003eA lot of functional programming ideas implemented in other programming languages started in Lisp.\u003c/li\u003e\n\u003cli\u003eA lot of academic computer science work uses Lisp.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"common-lisp-s-object-oriented-system-is-great\"\u003eCommon Lisp\u0026rsquo;s Object-Oriented System is Great\u003c/h2\u003e\n\u003ch2 id=\"development-of-programs-in-lisp-advance-faster-then-in-other-languages\"\u003eDevelopment of programs in Lisp advance faster then in other languages\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eIts easy to build a prototype of an idea in Lisp.\u003c/p\u003e","title":"Why Lisp?"},{"content":"Focus on the Fundamentals In all of my learning of programming and computer science I would like to keep a focus on having strong fundamentals. This desire to have strong fundamentals is what informs my decisions on what to learn and in what order. Languages JavaScript Many sources online say you should take either JavaScript or Python as your first language. I like that JavaScript has more of a closeness to C-syntax since C is a high priority on my list of languages to learn. With JavaScript I can build and interact with the full stack of web development. I can work from browser to server. This means the skills I learn can be applied to more places. JavaScript is thought of having a closeness to Lisp. So this also feeds in to my desire to learn Lisp. In learning JavaScript I believe it will be easy to crossover into Python. But I don\u0026rsquo;t think it would be as easy the other way around. In the end, Python being a very important language, I will still get to learning it at some point no matter what. It\u0026rsquo;s important to really grokk one language. Then it will be easier to pick up the rest because I will actually understand the core principles of programming. Sort of like mastering one key in song writing. Then later it will be easy to pick up the rest of the keys. JavaScript works in the browser which means that I can build little applications that can run in browser. No need to download anything. Lisp/Elisp I learned lisp because of reading that it will help you to be a better programming. However they also say it shouldn\u0026rsquo;t be your first language. As a result of learning lisp I was lead towards Emacs Emacs I believe also helps me to be a better programmer All of the greatest engineers in the world use emacs\nEmacs is the 100 year editor\nYou have to be way smart to use emacs well and it makes you incredibily powerful if you can master it.\nI find there is a certain power in being able to customize your tools. And once you get the hang of it customizing it is actually quite simple\nThe great programmers, on the other hand, will adapt their environment to suit themselves, in such ways as writing scripts or their own tools, or extending their tools.\nEmacs gives me inspiration to keep learing lisp and by extension programming fundamentals in general. Emacs is a mix of C and [Emacs-]Lisp so it re enforces my skills in each of those areas. C C, even more so then C++, seems to be at the core of computer programming and computer science in general. With C I\u0026rsquo;m indirectly developing skills in most other languages. C gives you an appreciation of how computers work. Blockchain I find blockchain technology facinating. I love the mix of technology, economics, and finance. I\u0026rsquo;m intersted in the GameFi space. But I\u0026rsquo;m also very interested in DeFi, general tokenomics and DAO space. Summary The tech, computer science and programming landscape is vast. The things above are my core interest but for sure I\u0026rsquo;m very intersted in various aspects of computer science and tech. ","permalink":"http://localhost:1313/posts/tech_i_m_interested_in/","summary":"\u003ch2 id=\"focus-on-the-fundamentals\"\u003eFocus on the Fundamentals\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eIn all of my learning of programming and computer science I would like to keep a focus on having strong fundamentals. This desire to have strong fundamentals is what informs my decisions on what to learn and in what order.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"languages\"\u003eLanguages\u003c/h2\u003e\n\u003ch3 id=\"javascript\"\u003eJavaScript\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eMany sources online say you should take either JavaScript or Python as your first language.\u003c/li\u003e\n\u003cli\u003eI like that JavaScript has more of a closeness to C-syntax since C is a high priority on my list of languages to learn.\u003c/li\u003e\n\u003cli\u003eWith JavaScript I can build and interact with the full stack of web development. I can work from browser to server. This means the skills I learn can be applied to more places.\u003c/li\u003e\n\u003cli\u003eJavaScript is thought of having a closeness to Lisp. So this also feeds in to my desire to learn Lisp.\u003c/li\u003e\n\u003cli\u003eIn learning JavaScript I believe it will be easy to crossover into Python. But I don\u0026rsquo;t think it would be as easy the other way around.  In the end, Python being a very important language, I will still get to learning it at some point no matter what.\u003c/li\u003e\n\u003cli\u003eIt\u0026rsquo;s important to really grokk one language. Then it will be easier to pick up the rest because I will actually understand the core principles of programming.\n\u003cul\u003e\n\u003cli\u003eSort of like mastering one key in song writing. Then later it will be easy to pick up the rest of the keys.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eJavaScript works in the browser which means that I can build little applications that can run in browser. No need to download anything.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"lisp-elisp\"\u003eLisp/Elisp\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eI learned lisp because of reading that it will help you to be a better programming. However they also say it shouldn\u0026rsquo;t be your first language.\u003c/li\u003e\n\u003cli\u003eAs a result of learning lisp I was lead towards Emacs\u003c/li\u003e\n\u003cli\u003eEmacs I believe also helps me to be a better programmer\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eAll of the greatest engineers in the world use emacs\u003c/p\u003e","title":"Tech I'm Intersted In"},{"content":"The lambda calculus is a foundational mathematical framework for studying functions. It forms the bedrock of functional programming, offering a powerful and elegant way to define and manipulate functions. Emacs Lisp, a dialect of Lisp heavily used within the Emacs editor, offers a flexible environment for exploring these concepts.\nIn this article, we\u0026rsquo;ll embark on a journey to understand how the lambda calculus is expressed within Emacs Lisp, using illustrative examples to highlight the core concepts.\nFunctions as Lambda Expressions Let\u0026rsquo;s begin by considering a simple function that adds 3 to a given number:\n(let ((x 20)) (+ x 3)) This code defines a function using the let construct, binding the variable x to the value 20 and then performing the addition. We can rewrite this using a lambda expression, a core construct of the lambda calculus:\n((lambda (x) (+ x 3)) 20) Here, we define a lambda function (lambda (x) (+ x 3)), which takes a single argument x and returns the result of adding 3 to it. The argument 20 is then passed to this function, yielding the same result as the previous let expression.\nNested Lambdas: Simulating let* The let* construct in Emacs Lisp allows for sequential binding of variables, where each subsequent variable can refer to previously defined ones. Let\u0026rsquo;s consider an example:\n(let* ((x 20) (y x) ) x) This code first binds x to 20 and then binds y to the value of x. It then returns the value of x. We can mimic this behavior with nested lambda functions:\n((lambda (x) ((lambda (y) x) x)) 20) The outer lambda binds x to 20. The inner lambda binds y to the value of x but ultimately returns the value of x, demonstrating that the binding of y doesn\u0026rsquo;t affect the result.\nCurrying: A Functional Approach The nested lambda functions used above hint at a core concept in functional programming: currying. Currying transforms a function that takes multiple arguments into a series of functions, each taking a single argument. While not strictly currying, the nested lambda functions in the previous example illustrate a similar approach.\nThe outer lambda takes the first argument (x) and then returns the inner lambda, which takes the second argument (y). While the inner lambda in this example ignores the value of y, currying allows us to build up functions incrementally, one argument at a time.\nConclusion Exploring the lambda calculus within Emacs Lisp provides valuable insights into the functional programming paradigm. By understanding how lambda expressions work and how they can be used to express concepts like let*, we gain a deeper understanding of the power and elegance of functional programming. As you continue your journey through the world of functional programming, remember that the lambda calculus is a potent tool, offering a unique and powerful way to represent and manipulate functions.\n","permalink":"http://localhost:1313/posts/expressing-lambda-calculus-in-emacs-lisp/","summary":"\u003cp\u003eThe lambda calculus is a foundational mathematical framework for studying functions. It forms the bedrock of functional programming, offering a powerful and elegant way to define and manipulate functions. Emacs Lisp, a dialect of Lisp heavily used within the Emacs editor, offers a flexible environment for exploring these concepts.\u003c/p\u003e\n\u003cp\u003eIn this article, we\u0026rsquo;ll embark on a journey to understand how the lambda calculus is expressed within Emacs Lisp, using illustrative examples to highlight the core concepts.\u003c/p\u003e","title":"Expressing Lambda Calculus in Emacs Lisp"},{"content":"Overview Endo can be used as a form of composition by concating functions. In this concatination functions results are fed into the concatted function.\nThe value is fed into Endo\u0026rsquo;s run function providing opportunities for lazy operations.\nI\u0026rsquo;m purposely being extremely explicit because I make to make sure that I understand each step of these functional implementations. ## Examples\nExample 1 // Endo monoid declaration // Endo :: (a -\u0026gt; a) -\u0026gt; Endo a const Endo = run =\u0026gt; ({ run, // concat :: Endo a -\u0026gt; Endo a -\u0026gt; Endo a concat: other =\u0026gt; Endo(x =\u0026gt; run(other.run(x))) }) // Endo.empty :: () -\u0026gt; Endo a Endo.empty = () =\u0026gt; Endo(x =\u0026gt; x) // List monad for putting functions into a list. // List :: [a] -\u0026gt; List a const List = list =\u0026gt; ({ list, // map :: (a -\u0026gt; b) -\u0026gt; List a -\u0026gt; List b map: fn =\u0026gt; List(list.map(fn)), // fold :: ((b, a) -\u0026gt; b, b) -\u0026gt; List a -\u0026gt; List b fold: (fn, initialValue) =\u0026gt; List(list.reduce(fn, initialValue)), // foldMap :: (a -\u0026gt; b) -\u0026gt; b -\u0026gt; List a -\u0026gt; b foldMap: (monoid, empty) =\u0026gt; { return empty != null ? list.reduce((acc, x, i) =\u0026gt; acc.concat(monoid(x, i)), empty) : list.map(monoid).reduce((acc, x) =\u0026gt; acc.concat(x)) }, // extract :: () -\u0026gt; [a] extract: () =\u0026gt; list, }) // Utility functions // compose :: (b -\u0026gt; c) -\u0026gt; (a -\u0026gt; b) -\u0026gt; a -\u0026gt; c const compose = f =\u0026gt; g =\u0026gt; x =\u0026gt; f(g(x)) // curry :: ((a, b) -\u0026gt; c) -\u0026gt; a -\u0026gt; b -\u0026gt; c const curry = f =\u0026gt; a =\u0026gt; b =\u0026gt; f(a, b) // toUpper :: String -\u0026gt; String const toUpper = str =\u0026gt; str.toUpperCase() // exclaim :: String -\u0026gt; String const exclaim = str =\u0026gt; `${str}!!` // to OrgHeader :: String -\u0026gt; String const toOrgHeader = str =\u0026gt; `* ${str}` // toOrgTagList :: [String] -\u0026gt; String const toOrgTagList = xs =\u0026gt; List(xs) .map((tag, index) =\u0026gt; !index ? `:${tag}:` : `${tag}:` ) .fold((accumalator,tag, index) =\u0026gt; accumalator.concat(tag) ,\u0026#39;\u0026#39;) .extract() // Tag list for header const tags = [\u0026#39;javascript\u0026#39;, \u0026#39;completed\u0026#39;, \u0026#39;moved\u0026#39;] // addTagsToHeader :: [String] -\u0026gt; String -\u0026gt; String const addTagsToHeader = curry((tagList,str) =\u0026gt; `${str} ${tagList}`) console.log(addTagsToHeader(toOrgTagList(tags))(\u0026#34;A Header\u0026#34;)) const result = List([addTagsToHeader(toOrgTagList(tags)),toOrgHeader, toUpper, exclaim]).foldMap(Endo, Endo.empty(\u0026#39;\u0026#39;)).run(\u0026#39;hello\u0026#39;) //\u0026gt; A Header :javascript:completed:moved: console.log(result) //\u0026gt; HELLO!! :javascript:completed:moved: ","permalink":"http://localhost:1313/posts/endo-monoid/","summary":"\u003ch2 id=\"overview\"\u003eOverview\u003c/h2\u003e\n\u003cp\u003eEndo can be used as a form of composition by concating functions. In this concatination functions results are fed into the concatted function.\u003c/p\u003e\n\u003cp\u003eThe value is fed into Endo\u0026rsquo;s run function providing opportunities for lazy operations.\u003c/p\u003e\n\u003cp\u003eI\u0026rsquo;m purposely being extremely explicit because I make to make sure that I understand each step of these functional implementations.\n## Examples\u003c/p\u003e\n\u003ch4 id=\"example-1\"\u003eExample 1\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Endo monoid declaration\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Endo :: (a -\u0026gt; a) -\u0026gt; Endo a\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eEndo\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003erun\u003c/span\u003e =\u0026gt; ({\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003erun\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// concat :: Endo a -\u0026gt; Endo a -\u0026gt; Endo a\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#a6e22e\"\u003econcat\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eother\u003c/span\u003e =\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eEndo\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003erun\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eother\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003erun\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Endo.empty :: () -\u0026gt; Endo a\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eEndo\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eempty\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e () =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003eEndo\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// List monad for putting functions into a list.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// List :: [a] -\u0026gt; List a\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eList\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e =\u0026gt; ({\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// map :: (a -\u0026gt; b) -\u0026gt; List a -\u0026gt; List b\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#a6e22e\"\u003emap\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efn\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003eList\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003emap\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003efn\u003c/span\u003e)),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// fold :: ((b, a) -\u0026gt; b, b) -\u0026gt; List a -\u0026gt; List b\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#a6e22e\"\u003efold\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003efn\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003einitialValue\u003c/span\u003e) =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003eList\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ereduce\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003efn\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003einitialValue\u003c/span\u003e)),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// foldMap :: (a -\u0026gt; b) -\u0026gt; b -\u0026gt; List a -\u0026gt; b\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#a6e22e\"\u003efoldMap\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003emonoid\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eempty\u003c/span\u003e) =\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eempty\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ereduce\u003c/span\u003e((\u003cspan style=\"color:#a6e22e\"\u003eacc\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e) =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003eacc\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003econcat\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003emonoid\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e)), \u003cspan style=\"color:#a6e22e\"\u003eempty\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003emap\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003emonoid\u003c/span\u003e).\u003cspan style=\"color:#a6e22e\"\u003ereduce\u003c/span\u003e((\u003cspan style=\"color:#a6e22e\"\u003eacc\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e) =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003eacc\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003econcat\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e))      },\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// extract :: () -\u0026gt; [a]\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#a6e22e\"\u003eextract\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e () =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Utility functions\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// compose :: (b -\u0026gt; c) -\u0026gt; (a -\u0026gt; b) -\u0026gt; a -\u0026gt; c\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecompose\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003eg\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eg\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// curry :: ((a, b) -\u0026gt; c) -\u0026gt; a -\u0026gt; b -\u0026gt; c\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecurry\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// toUpper :: String -\u0026gt; String\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etoUpper\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estr\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003estr\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003etoUpperCase\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// exclaim :: String -\u0026gt; String\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eexclaim\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estr\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#e6db74\"\u003e`\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003estr\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e!!`\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// to OrgHeader :: String -\u0026gt; String\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etoOrgHeader\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estr\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#e6db74\"\u003e`* \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003estr\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e`\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// toOrgTagList :: [String] -\u0026gt; String\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etoOrgTagList\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003exs\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003eList\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003exs\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      .\u003cspan style=\"color:#a6e22e\"\u003emap\u003c/span\u003e((\u003cspan style=\"color:#a6e22e\"\u003etag\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eindex\u003c/span\u003e) =\u0026gt; \u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eindex\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e`:\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003etag\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e:`\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e`\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003etag\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e:`\u003c/span\u003e )\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      .\u003cspan style=\"color:#a6e22e\"\u003efold\u003c/span\u003e((\u003cspan style=\"color:#a6e22e\"\u003eaccumalator\u003c/span\u003e,\u003cspan style=\"color:#a6e22e\"\u003etag\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eindex\u003c/span\u003e) =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003eaccumalator\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003econcat\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003etag\u003c/span\u003e) ,\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      .\u003cspan style=\"color:#a6e22e\"\u003eextract\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Tag list for header\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etags\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e [\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;javascript\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;completed\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;moved\u0026#39;\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// addTagsToHeader :: [String] -\u0026gt; String -\u0026gt; String\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eaddTagsToHeader\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#a6e22e\"\u003ecurry\u003c/span\u003e((\u003cspan style=\"color:#a6e22e\"\u003etagList\u003c/span\u003e,\u003cspan style=\"color:#a6e22e\"\u003estr\u003c/span\u003e) =\u0026gt; \u003cspan style=\"color:#e6db74\"\u003e`\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003estr\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003etagList\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e`\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003econsole\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eaddTagsToHeader\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003etoOrgTagList\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003etags\u003c/span\u003e))(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;A Header\u0026#34;\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eresult\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eList\u003c/span\u003e([\u003cspan style=\"color:#a6e22e\"\u003eaddTagsToHeader\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003etoOrgTagList\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003etags\u003c/span\u003e)),\u003cspan style=\"color:#a6e22e\"\u003etoOrgHeader\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003etoUpper\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eexclaim\u003c/span\u003e]).\u003cspan style=\"color:#a6e22e\"\u003efoldMap\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eEndo\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eEndo\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eempty\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e)).\u003cspan style=\"color:#a6e22e\"\u003erun\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;hello\u0026#39;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e//\u0026gt; A Header :javascript:completed:moved:\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003econsole\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eresult\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e//\u0026gt; HELLO!! :javascript:completed:moved:\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"The Endo Monoid"},{"content":"Overview This is essential a map of content for functional programming concepts that I\u0026rsquo;m learning.\nList Monad ","permalink":"http://localhost:1313/posts/functional-programming/","summary":"\u003ch2 id=\"overview\"\u003eOverview\u003c/h2\u003e\n\u003cp\u003eThis is essential a map of content for functional programming concepts that I\u0026rsquo;m learning.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"/posts/list-monad/\"\u003eList Monad\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","title":"Functional Programming Concepts"},{"content":"Thoughts I\u0026rsquo;m writing this more as a way to document and organize my thoughts around the list monad.\nThis is a very important monad.\nA map of functional concepts I\u0026rsquo;m currently studying can be found at Functional Programming Concepts.\nThe Code export const List = list =\u0026gt; ({ list, map: fn =\u0026gt; List(list.map(fn)), fold: (fn, initialValue) =\u0026gt; List(list.reduce(fn, initialValue)), foldMap(monoid, empty) { const mappedList = list.reduce(fn, initialValue); const result = mappedList.reduce( (accumalator, monoidValue) =\u0026gt; accumalator.concat(monoidValue), empty, ); return List(result); }, extract: () =\u0026gt; list, }); Example Here is a sample implementation of this list monad.\nList([1, 2, 3, 4]).map(x =\u0026gt; x + 1) //\u0026gt; [2,3,4,5] List([\u0026#34;red\u0026#34;, \u0026#34;Blue\u0026#34;, \u0026#34;Yellow\u0026#34;, \u0026#34;Green\u0026#34;]).(str =\u0026gt; str.toUpperCase()) //\u0026gt; [\u0026#34;RED\u0026#34;, \u0026#34;BLUE\u0026#34;, \u0026#34;YELLOW\u0026#34;, \u0026#34;GREEN\u0026#34;] Github A current version of my implementation of this list monad can be found here.\n","permalink":"http://localhost:1313/posts/list-monad/","summary":"\u003ch2 id=\"thoughts\"\u003eThoughts\u003c/h2\u003e\n\u003cp\u003eI\u0026rsquo;m writing this more as a way to document and organize my thoughts around the list monad.\u003c/p\u003e\n\u003cp\u003eThis is a very important monad.\u003c/p\u003e\n\u003cp\u003eA map of functional concepts I\u0026rsquo;m currently studying can be found at \u003ca href=\"/posts/functional-programming/\"\u003eFunctional Programming Concepts\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"the-code\"\u003eThe Code\u003c/h2\u003e\n\u003cp\u003e\u003ca id=\"code-snippet--list-monad\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eexport\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eList\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e =\u0026gt; ({\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003emap\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efn\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003eList\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003emap\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003efn\u003c/span\u003e)),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003efold\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003efn\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003einitialValue\u003c/span\u003e) =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003eList\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ereduce\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003efn\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003einitialValue\u003c/span\u003e)),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003efoldMap\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003emonoid\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eempty\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emappedList\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ereduce\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003efn\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003einitialValue\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eresult\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emappedList\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ereduce\u003c/span\u003e(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      (\u003cspan style=\"color:#a6e22e\"\u003eaccumalator\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003emonoidValue\u003c/span\u003e) =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003eaccumalator\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003econcat\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003emonoidValue\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#a6e22e\"\u003eempty\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    );\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eList\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eresult\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  },\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003eextract\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e () =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e});\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"example\"\u003eExample\u003c/h3\u003e\n\u003cp\u003eHere is a sample implementation of this list monad.\u003c/p\u003e","title":"List Monad in JavaScript"},{"content":"Introduction Emacs Capture Templates Org-Roam Browser Browser Options Capture Templates ","permalink":"http://localhost:1313/posts/my-zettelkasten-workflow/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003ch2 id=\"emacs\"\u003eEmacs\u003c/h2\u003e\n\u003ch3 id=\"capture-templates\"\u003eCapture Templates\u003c/h3\u003e\n\u003ch2 id=\"org-roam\"\u003eOrg-Roam\u003c/h2\u003e\n\u003ch2 id=\"browser\"\u003eBrowser\u003c/h2\u003e\n\u003ch3 id=\"browser-options\"\u003eBrowser Options\u003c/h3\u003e\n\u003ch3 id=\"capture-templates\"\u003eCapture Templates\u003c/h3\u003e","title":"My Zettelkasten Workflow"},{"content":"Writing Lisp Code is Easy However good Lisp programming is hard according to Richard P. Gabriel. Lisp is extremely hackable It\u0026rsquo;s easy to create a Lisp Language It\u0026rsquo;s Easy to Make a Lisp Language Domain Specific Writing a parser and compiler for Lisp is way claner than other languages Emacs is configured with Lisp Lisp Helps Me with My Programmatic Thinking Once you know Lisp you think of programming in a very different way. Lisp has heavy ties to Functional Programming My interested in mathematics has motivated my interest in functional programming. A lot of functional programming ideas implemented in other programming languages started in Lisp. A lot of academic computer science work uses Lisp. Common Lisp\u0026rsquo;s Object-Oriented System is Great Development of programs in Lisp advance faster then in other languages Its easy to build a prototype of an idea in Lisp.\nMany programms have started as Emacs packages.\nThe discretionary exportable functionality entrusted to the individual Lisp programmer is more than an order of magnitude greater than that to be found within Pascal enterprises. - Alan J. Perlis\nDevelopment of programs in Lisp proceeds somewhere between 1000 and 5000 times faster then development in \u0026ldquo;modern\u0026rdquo; or \u0026ldquo;improved\u0026rdquo; computer languages. - Douglas Lenat Lex Fridman Podcast\nYou can hire fewer people, by 80%, by developing in Lisp. - Eric Normand\nYou don\u0026rsquo;t need a lot of dependencies to get your project off in Lisp\n","permalink":"http://localhost:1313/posts/why-lisp/","summary":"\u003ch2 id=\"writing-lisp-code-is-easy\"\u003eWriting Lisp Code is Easy\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHowever good Lisp programming is hard according to Richard P. Gabriel.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"lisp-is-extremely-hackable\"\u003eLisp is extremely hackable\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eIt\u0026rsquo;s easy to create a Lisp Language\u003c/li\u003e\n\u003cli\u003eIt\u0026rsquo;s Easy to Make a Lisp Language Domain Specific\u003c/li\u003e\n\u003cli\u003eWriting a parser and compiler for Lisp is way claner than other languages\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"emacs-is-configured-with-lisp\"\u003eEmacs is configured with Lisp\u003c/h2\u003e\n\u003ch2 id=\"lisp-helps-me-with-my-programmatic-thinking\"\u003eLisp Helps Me with My Programmatic Thinking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOnce you know Lisp you think of programming in a very different way.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"lisp-has-heavy-ties-to-functional-programming\"\u003eLisp has heavy ties to Functional Programming\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eMy interested in mathematics has motivated my interest in functional programming.\u003c/li\u003e\n\u003cli\u003eA lot of functional programming ideas implemented in other programming languages started in Lisp.\u003c/li\u003e\n\u003cli\u003eA lot of academic computer science work uses Lisp.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"common-lisp-s-object-oriented-system-is-great\"\u003eCommon Lisp\u0026rsquo;s Object-Oriented System is Great\u003c/h2\u003e\n\u003ch2 id=\"development-of-programs-in-lisp-advance-faster-then-in-other-languages\"\u003eDevelopment of programs in Lisp advance faster then in other languages\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eIts easy to build a prototype of an idea in Lisp.\u003c/p\u003e","title":"Why Lisp?"},{"content":"Focus on the Fundamentals In all of my learning of programming and computer science I would like to keep a focus on having strong fundamentals. This desire to have strong fundamentals is what informs my decisions on what to learn and in what order. Languages JavaScript Many sources online say you should take either JavaScript or Python as your first language. I like that JavaScript has more of a closeness to C-syntax since C is a high priority on my list of languages to learn. With JavaScript I can build and interact with the full stack of web development. I can work from browser to server. This means the skills I learn can be applied to more places. JavaScript is thought of having a closeness to Lisp. So this also feeds in to my desire to learn Lisp. In learning JavaScript I believe it will be easy to crossover into Python. But I don\u0026rsquo;t think it would be as easy the other way around. In the end, Python being a very important language, I will still get to learning it at some point no matter what. It\u0026rsquo;s important to really grokk one language. Then it will be easier to pick up the rest because I will actually understand the core principles of programming. Sort of like mastering one key in song writing. Then later it will be easy to pick up the rest of the keys. JavaScript works in the browser which means that I can build little applications that can run in browser. No need to download anything. Lisp/Elisp I learned lisp because of reading that it will help you to be a better programming. However they also say it shouldn\u0026rsquo;t be your first language. As a result of learning lisp I was lead towards Emacs Emacs I believe also helps me to be a better programmer All of the greatest engineers in the world use emacs\nEmacs is the 100 year editor\nYou have to be way smart to use emacs well and it makes you incredibily powerful if you can master it.\nI find there is a certain power in being able to customize your tools. And once you get the hang of it customizing it is actually quite simple\nThe great programmers, on the other hand, will adapt their environment to suit themselves, in such ways as writing scripts or their own tools, or extending their tools.\nEmacs gives me inspiration to keep learing lisp and by extension programming fundamentals in general. Emacs is a mix of C and [Emacs-]Lisp so it re enforces my skills in each of those areas. C C, even more so then C++, seems to be at the core of computer programming and computer science in general. With C I\u0026rsquo;m indirectly developing skills in most other languages. C gives you an appreciation of how computers work. Blockchain I find blockchain technology facinating. I love the mix of technology, economics, and finance. I\u0026rsquo;m intersted in the GameFi space. But I\u0026rsquo;m also very interested in DeFi, general tokenomics and DAO space. Summary The tech, computer science and programming landscape is vast. The things above are my core interest but for sure I\u0026rsquo;m very intersted in various aspects of computer science and tech. ","permalink":"http://localhost:1313/posts/tech_i_m_interested_in/","summary":"\u003ch2 id=\"focus-on-the-fundamentals\"\u003eFocus on the Fundamentals\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eIn all of my learning of programming and computer science I would like to keep a focus on having strong fundamentals. This desire to have strong fundamentals is what informs my decisions on what to learn and in what order.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"languages\"\u003eLanguages\u003c/h2\u003e\n\u003ch3 id=\"javascript\"\u003eJavaScript\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eMany sources online say you should take either JavaScript or Python as your first language.\u003c/li\u003e\n\u003cli\u003eI like that JavaScript has more of a closeness to C-syntax since C is a high priority on my list of languages to learn.\u003c/li\u003e\n\u003cli\u003eWith JavaScript I can build and interact with the full stack of web development. I can work from browser to server. This means the skills I learn can be applied to more places.\u003c/li\u003e\n\u003cli\u003eJavaScript is thought of having a closeness to Lisp. So this also feeds in to my desire to learn Lisp.\u003c/li\u003e\n\u003cli\u003eIn learning JavaScript I believe it will be easy to crossover into Python. But I don\u0026rsquo;t think it would be as easy the other way around.  In the end, Python being a very important language, I will still get to learning it at some point no matter what.\u003c/li\u003e\n\u003cli\u003eIt\u0026rsquo;s important to really grokk one language. Then it will be easier to pick up the rest because I will actually understand the core principles of programming.\n\u003cul\u003e\n\u003cli\u003eSort of like mastering one key in song writing. Then later it will be easy to pick up the rest of the keys.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eJavaScript works in the browser which means that I can build little applications that can run in browser. No need to download anything.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"lisp-elisp\"\u003eLisp/Elisp\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eI learned lisp because of reading that it will help you to be a better programming. However they also say it shouldn\u0026rsquo;t be your first language.\u003c/li\u003e\n\u003cli\u003eAs a result of learning lisp I was lead towards Emacs\u003c/li\u003e\n\u003cli\u003eEmacs I believe also helps me to be a better programmer\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eAll of the greatest engineers in the world use emacs\u003c/p\u003e","title":"Tech I'm Intersted In"},{"content":"","permalink":"http://localhost:1313/posts/find-closest-number-to-zero/","summary":"","title":"Find Closest Number To Zero"},{"content":"The lambda calculus is a foundational mathematical framework for studying functions. It forms the bedrock of functional programming, offering a powerful and elegant way to define and manipulate functions. Emacs Lisp, a dialect of Lisp heavily used within the Emacs editor, offers a flexible environment for exploring these concepts.\nIn this article, we\u0026rsquo;ll embark on a journey to understand how the lambda calculus is expressed within Emacs Lisp, using illustrative examples to highlight the core concepts.\nFunctions as Lambda Expressions Let\u0026rsquo;s begin by considering a simple function that adds 3 to a given number:\n(let ((x 20)) (+ x 3)) This code defines a function using the let construct, binding the variable x to the value 20 and then performing the addition. We can rewrite this using a lambda expression, a core construct of the lambda calculus:\n((lambda (x) (+ x 3)) 20) Here, we define a lambda function (lambda (x) (+ x 3)), which takes a single argument x and returns the result of adding 3 to it. The argument 20 is then passed to this function, yielding the same result as the previous let expression.\nNested Lambdas: Simulating let* The let* construct in Emacs Lisp allows for sequential binding of variables, where each subsequent variable can refer to previously defined ones. Let\u0026rsquo;s consider an example:\n(let* ((x 20) (y x) ) x) This code first binds x to 20 and then binds y to the value of x. It then returns the value of x. We can mimic this behavior with nested lambda functions:\n((lambda (x) ((lambda (y) x) x)) 20) The outer lambda binds x to 20. The inner lambda binds y to the value of x but ultimately returns the value of x, demonstrating that the binding of y doesn\u0026rsquo;t affect the result.\nCurrying: A Functional Approach The nested lambda functions used above hint at a core concept in functional programming: currying. Currying transforms a function that takes multiple arguments into a series of functions, each taking a single argument. While not strictly currying, the nested lambda functions in the previous example illustrate a similar approach.\nThe outer lambda takes the first argument (x) and then returns the inner lambda, which takes the second argument (y). While the inner lambda in this example ignores the value of y, currying allows us to build up functions incrementally, one argument at a time.\nConclusion Exploring the lambda calculus within Emacs Lisp provides valuable insights into the functional programming paradigm. By understanding how lambda expressions work and how they can be used to express concepts like let*, we gain a deeper understanding of the power and elegance of functional programming. As you continue your journey through the world of functional programming, remember that the lambda calculus is a potent tool, offering a unique and powerful way to represent and manipulate functions.\n","permalink":"http://localhost:1313/posts/expressing-lambda-calculus-in-emacs-lisp/","summary":"\u003cp\u003eThe lambda calculus is a foundational mathematical framework for studying functions. It forms the bedrock of functional programming, offering a powerful and elegant way to define and manipulate functions. Emacs Lisp, a dialect of Lisp heavily used within the Emacs editor, offers a flexible environment for exploring these concepts.\u003c/p\u003e\n\u003cp\u003eIn this article, we\u0026rsquo;ll embark on a journey to understand how the lambda calculus is expressed within Emacs Lisp, using illustrative examples to highlight the core concepts.\u003c/p\u003e","title":"Expressing Lambda Calculus in Emacs Lisp"},{"content":"Overview Endo can be used as a form of composition by concating functions. In this concatination functions results are fed into the concatted function.\nThe value is fed into Endo\u0026rsquo;s run function providing opportunities for lazy operations.\nI\u0026rsquo;m purposely being extremely explicit because I make to make sure that I understand each step of these functional implementations. ## Examples\nExample 1 // Endo monoid declaration // Endo :: (a -\u0026gt; a) -\u0026gt; Endo a const Endo = run =\u0026gt; ({ run, // concat :: Endo a -\u0026gt; Endo a -\u0026gt; Endo a concat: other =\u0026gt; Endo(x =\u0026gt; run(other.run(x))) }) // Endo.empty :: () -\u0026gt; Endo a Endo.empty = () =\u0026gt; Endo(x =\u0026gt; x) // List monad for putting functions into a list. // List :: [a] -\u0026gt; List a const List = list =\u0026gt; ({ list, // map :: (a -\u0026gt; b) -\u0026gt; List a -\u0026gt; List b map: fn =\u0026gt; List(list.map(fn)), // fold :: ((b, a) -\u0026gt; b, b) -\u0026gt; List a -\u0026gt; List b fold: (fn, initialValue) =\u0026gt; List(list.reduce(fn, initialValue)), // foldMap :: (a -\u0026gt; b) -\u0026gt; b -\u0026gt; List a -\u0026gt; b foldMap: (monoid, empty) =\u0026gt; { return empty != null ? list.reduce((acc, x, i) =\u0026gt; acc.concat(monoid(x, i)), empty) : list.map(monoid).reduce((acc, x) =\u0026gt; acc.concat(x)) }, // extract :: () -\u0026gt; [a] extract: () =\u0026gt; list, }) // Utility functions // compose :: (b -\u0026gt; c) -\u0026gt; (a -\u0026gt; b) -\u0026gt; a -\u0026gt; c const compose = f =\u0026gt; g =\u0026gt; x =\u0026gt; f(g(x)) // curry :: ((a, b) -\u0026gt; c) -\u0026gt; a -\u0026gt; b -\u0026gt; c const curry = f =\u0026gt; a =\u0026gt; b =\u0026gt; f(a, b) // toUpper :: String -\u0026gt; String const toUpper = str =\u0026gt; str.toUpperCase() // exclaim :: String -\u0026gt; String const exclaim = str =\u0026gt; `${str}!!` // to OrgHeader :: String -\u0026gt; String const toOrgHeader = str =\u0026gt; `* ${str}` // toOrgTagList :: [String] -\u0026gt; String const toOrgTagList = xs =\u0026gt; List(xs) .map((tag, index) =\u0026gt; !index ? `:${tag}:` : `${tag}:` ) .fold((accumalator,tag, index) =\u0026gt; accumalator.concat(tag) ,\u0026#39;\u0026#39;) .extract() // Tag list for header const tags = [\u0026#39;javascript\u0026#39;, \u0026#39;completed\u0026#39;, \u0026#39;moved\u0026#39;] // addTagsToHeader :: [String] -\u0026gt; String -\u0026gt; String const addTagsToHeader = curry((tagList,str) =\u0026gt; `${str} ${tagList}`) console.log(addTagsToHeader(toOrgTagList(tags))(\u0026#34;A Header\u0026#34;)) const result = List([addTagsToHeader(toOrgTagList(tags)),toOrgHeader, toUpper, exclaim]).foldMap(Endo, Endo.empty(\u0026#39;\u0026#39;)).run(\u0026#39;hello\u0026#39;) //\u0026gt; A Header :javascript:completed:moved: console.log(result) //\u0026gt; HELLO!! :javascript:completed:moved: ","permalink":"http://localhost:1313/posts/endo-monoid/","summary":"\u003ch2 id=\"overview\"\u003eOverview\u003c/h2\u003e\n\u003cp\u003eEndo can be used as a form of composition by concating functions. In this concatination functions results are fed into the concatted function.\u003c/p\u003e\n\u003cp\u003eThe value is fed into Endo\u0026rsquo;s run function providing opportunities for lazy operations.\u003c/p\u003e\n\u003cp\u003eI\u0026rsquo;m purposely being extremely explicit because I make to make sure that I understand each step of these functional implementations.\n## Examples\u003c/p\u003e\n\u003ch4 id=\"example-1\"\u003eExample 1\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Endo monoid declaration\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Endo :: (a -\u0026gt; a) -\u0026gt; Endo a\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eEndo\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003erun\u003c/span\u003e =\u0026gt; ({\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003erun\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// concat :: Endo a -\u0026gt; Endo a -\u0026gt; Endo a\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#a6e22e\"\u003econcat\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eother\u003c/span\u003e =\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eEndo\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003erun\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eother\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003erun\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Endo.empty :: () -\u0026gt; Endo a\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eEndo\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eempty\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e () =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003eEndo\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// List monad for putting functions into a list.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// List :: [a] -\u0026gt; List a\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eList\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e =\u0026gt; ({\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// map :: (a -\u0026gt; b) -\u0026gt; List a -\u0026gt; List b\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#a6e22e\"\u003emap\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efn\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003eList\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003emap\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003efn\u003c/span\u003e)),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// fold :: ((b, a) -\u0026gt; b, b) -\u0026gt; List a -\u0026gt; List b\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#a6e22e\"\u003efold\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003efn\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003einitialValue\u003c/span\u003e) =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003eList\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ereduce\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003efn\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003einitialValue\u003c/span\u003e)),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// foldMap :: (a -\u0026gt; b) -\u0026gt; b -\u0026gt; List a -\u0026gt; b\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#a6e22e\"\u003efoldMap\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003emonoid\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eempty\u003c/span\u003e) =\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eempty\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ereduce\u003c/span\u003e((\u003cspan style=\"color:#a6e22e\"\u003eacc\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e) =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003eacc\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003econcat\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003emonoid\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e)), \u003cspan style=\"color:#a6e22e\"\u003eempty\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003emap\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003emonoid\u003c/span\u003e).\u003cspan style=\"color:#a6e22e\"\u003ereduce\u003c/span\u003e((\u003cspan style=\"color:#a6e22e\"\u003eacc\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e) =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003eacc\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003econcat\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e))      },\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// extract :: () -\u0026gt; [a]\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#a6e22e\"\u003eextract\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e () =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Utility functions\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// compose :: (b -\u0026gt; c) -\u0026gt; (a -\u0026gt; b) -\u0026gt; a -\u0026gt; c\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecompose\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003eg\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eg\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// curry :: ((a, b) -\u0026gt; c) -\u0026gt; a -\u0026gt; b -\u0026gt; c\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecurry\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// toUpper :: String -\u0026gt; String\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etoUpper\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estr\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003estr\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003etoUpperCase\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// exclaim :: String -\u0026gt; String\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eexclaim\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estr\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#e6db74\"\u003e`\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003estr\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e!!`\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// to OrgHeader :: String -\u0026gt; String\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etoOrgHeader\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estr\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#e6db74\"\u003e`* \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003estr\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e`\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// toOrgTagList :: [String] -\u0026gt; String\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etoOrgTagList\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003exs\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003eList\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003exs\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      .\u003cspan style=\"color:#a6e22e\"\u003emap\u003c/span\u003e((\u003cspan style=\"color:#a6e22e\"\u003etag\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eindex\u003c/span\u003e) =\u0026gt; \u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eindex\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e`:\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003etag\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e:`\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e`\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003etag\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e:`\u003c/span\u003e )\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      .\u003cspan style=\"color:#a6e22e\"\u003efold\u003c/span\u003e((\u003cspan style=\"color:#a6e22e\"\u003eaccumalator\u003c/span\u003e,\u003cspan style=\"color:#a6e22e\"\u003etag\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eindex\u003c/span\u003e) =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003eaccumalator\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003econcat\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003etag\u003c/span\u003e) ,\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      .\u003cspan style=\"color:#a6e22e\"\u003eextract\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Tag list for header\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etags\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e [\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;javascript\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;completed\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;moved\u0026#39;\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// addTagsToHeader :: [String] -\u0026gt; String -\u0026gt; String\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eaddTagsToHeader\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#a6e22e\"\u003ecurry\u003c/span\u003e((\u003cspan style=\"color:#a6e22e\"\u003etagList\u003c/span\u003e,\u003cspan style=\"color:#a6e22e\"\u003estr\u003c/span\u003e) =\u0026gt; \u003cspan style=\"color:#e6db74\"\u003e`\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003estr\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003etagList\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e`\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003econsole\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eaddTagsToHeader\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003etoOrgTagList\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003etags\u003c/span\u003e))(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;A Header\u0026#34;\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eresult\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eList\u003c/span\u003e([\u003cspan style=\"color:#a6e22e\"\u003eaddTagsToHeader\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003etoOrgTagList\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003etags\u003c/span\u003e)),\u003cspan style=\"color:#a6e22e\"\u003etoOrgHeader\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003etoUpper\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eexclaim\u003c/span\u003e]).\u003cspan style=\"color:#a6e22e\"\u003efoldMap\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eEndo\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eEndo\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eempty\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e)).\u003cspan style=\"color:#a6e22e\"\u003erun\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;hello\u0026#39;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e//\u0026gt; A Header :javascript:completed:moved:\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003econsole\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eresult\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e//\u0026gt; HELLO!! :javascript:completed:moved:\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"The Endo Monoid"},{"content":"Overview This is essential a map of content for functional programming concepts that I\u0026rsquo;m learning.\nList Monad ","permalink":"http://localhost:1313/posts/functional-programming/","summary":"\u003ch2 id=\"overview\"\u003eOverview\u003c/h2\u003e\n\u003cp\u003eThis is essential a map of content for functional programming concepts that I\u0026rsquo;m learning.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"/posts/list-monad/\"\u003eList Monad\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","title":"Functional Programming Concepts"},{"content":"Thoughts I\u0026rsquo;m writing this more as a way to document and organize my thoughts around the list monad.\nThis is a very important monad.\nA map of functional concepts I\u0026rsquo;m currently studying can be found at Functional Programming Concepts.\nThe Code export const List = list =\u0026gt; ({ list, map: fn =\u0026gt; List(list.map(fn)), fold: (fn, initialValue) =\u0026gt; List(list.reduce(fn, initialValue)), foldMap(monoid, empty) { const mappedList = list.reduce(fn, initialValue); const result = mappedList.reduce( (accumalator, monoidValue) =\u0026gt; accumalator.concat(monoidValue), empty, ); return List(result); }, extract: () =\u0026gt; list, }); Example Here is a sample implementation of this list monad.\nList([1, 2, 3, 4]).map(x =\u0026gt; x + 1) //\u0026gt; [2,3,4,5] List([\u0026#34;red\u0026#34;, \u0026#34;Blue\u0026#34;, \u0026#34;Yellow\u0026#34;, \u0026#34;Green\u0026#34;]).(str =\u0026gt; str.toUpperCase()) //\u0026gt; [\u0026#34;RED\u0026#34;, \u0026#34;BLUE\u0026#34;, \u0026#34;YELLOW\u0026#34;, \u0026#34;GREEN\u0026#34;] Github A current version of my implementation of this list monad can be found here.\n","permalink":"http://localhost:1313/posts/list-monad/","summary":"\u003ch2 id=\"thoughts\"\u003eThoughts\u003c/h2\u003e\n\u003cp\u003eI\u0026rsquo;m writing this more as a way to document and organize my thoughts around the list monad.\u003c/p\u003e\n\u003cp\u003eThis is a very important monad.\u003c/p\u003e\n\u003cp\u003eA map of functional concepts I\u0026rsquo;m currently studying can be found at \u003ca href=\"/posts/functional-programming/\"\u003eFunctional Programming Concepts\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"the-code\"\u003eThe Code\u003c/h2\u003e\n\u003cp\u003e\u003ca id=\"code-snippet--list-monad\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eexport\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eList\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e =\u0026gt; ({\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003emap\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efn\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003eList\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003emap\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003efn\u003c/span\u003e)),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003efold\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003efn\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003einitialValue\u003c/span\u003e) =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003eList\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ereduce\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003efn\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003einitialValue\u003c/span\u003e)),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003efoldMap\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003emonoid\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eempty\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emappedList\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ereduce\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003efn\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003einitialValue\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eresult\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emappedList\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ereduce\u003c/span\u003e(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      (\u003cspan style=\"color:#a6e22e\"\u003eaccumalator\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003emonoidValue\u003c/span\u003e) =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003eaccumalator\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003econcat\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003emonoidValue\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#a6e22e\"\u003eempty\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    );\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eList\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eresult\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  },\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003eextract\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e () =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e});\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"example\"\u003eExample\u003c/h3\u003e\n\u003cp\u003eHere is a sample implementation of this list monad.\u003c/p\u003e","title":"List Monad in JavaScript"},{"content":"Introduction Emacs Capture Templates Org-Roam Browser Browser Options Capture Templates ","permalink":"http://localhost:1313/posts/my-zettelkasten-workflow/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003ch2 id=\"emacs\"\u003eEmacs\u003c/h2\u003e\n\u003ch3 id=\"capture-templates\"\u003eCapture Templates\u003c/h3\u003e\n\u003ch2 id=\"org-roam\"\u003eOrg-Roam\u003c/h2\u003e\n\u003ch2 id=\"browser\"\u003eBrowser\u003c/h2\u003e\n\u003ch3 id=\"browser-options\"\u003eBrowser Options\u003c/h3\u003e\n\u003ch3 id=\"capture-templates\"\u003eCapture Templates\u003c/h3\u003e","title":"My Zettelkasten Workflow"},{"content":"Writing Lisp Code is Easy However good Lisp programming is hard according to Richard P. Gabriel. Lisp is extremely hackable It\u0026rsquo;s easy to create a Lisp Language It\u0026rsquo;s Easy to Make a Lisp Language Domain Specific Writing a parser and compiler for Lisp is way claner than other languages Emacs is configured with Lisp Lisp Helps Me with My Programmatic Thinking Once you know Lisp you think of programming in a very different way. Lisp has heavy ties to Functional Programming My interested in mathematics has motivated my interest in functional programming. A lot of functional programming ideas implemented in other programming languages started in Lisp. A lot of academic computer science work uses Lisp. Common Lisp\u0026rsquo;s Object-Oriented System is Great Development of programs in Lisp advance faster then in other languages Its easy to build a prototype of an idea in Lisp.\nMany programms have started as Emacs packages.\nThe discretionary exportable functionality entrusted to the individual Lisp programmer is more than an order of magnitude greater than that to be found within Pascal enterprises. - Alan J. Perlis\nDevelopment of programs in Lisp proceeds somewhere between 1000 and 5000 times faster then development in \u0026ldquo;modern\u0026rdquo; or \u0026ldquo;improved\u0026rdquo; computer languages. - Douglas Lenat Lex Fridman Podcast\nYou can hire fewer people, by 80%, by developing in Lisp. - Eric Normand\nYou don\u0026rsquo;t need a lot of dependencies to get your project off in Lisp\n","permalink":"http://localhost:1313/posts/why-lisp/","summary":"\u003ch2 id=\"writing-lisp-code-is-easy\"\u003eWriting Lisp Code is Easy\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHowever good Lisp programming is hard according to Richard P. Gabriel.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"lisp-is-extremely-hackable\"\u003eLisp is extremely hackable\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eIt\u0026rsquo;s easy to create a Lisp Language\u003c/li\u003e\n\u003cli\u003eIt\u0026rsquo;s Easy to Make a Lisp Language Domain Specific\u003c/li\u003e\n\u003cli\u003eWriting a parser and compiler for Lisp is way claner than other languages\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"emacs-is-configured-with-lisp\"\u003eEmacs is configured with Lisp\u003c/h2\u003e\n\u003ch2 id=\"lisp-helps-me-with-my-programmatic-thinking\"\u003eLisp Helps Me with My Programmatic Thinking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOnce you know Lisp you think of programming in a very different way.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"lisp-has-heavy-ties-to-functional-programming\"\u003eLisp has heavy ties to Functional Programming\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eMy interested in mathematics has motivated my interest in functional programming.\u003c/li\u003e\n\u003cli\u003eA lot of functional programming ideas implemented in other programming languages started in Lisp.\u003c/li\u003e\n\u003cli\u003eA lot of academic computer science work uses Lisp.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"common-lisp-s-object-oriented-system-is-great\"\u003eCommon Lisp\u0026rsquo;s Object-Oriented System is Great\u003c/h2\u003e\n\u003ch2 id=\"development-of-programs-in-lisp-advance-faster-then-in-other-languages\"\u003eDevelopment of programs in Lisp advance faster then in other languages\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eIts easy to build a prototype of an idea in Lisp.\u003c/p\u003e","title":"Why Lisp?"},{"content":"Focus on the Fundamentals In all of my learning of programming and computer science I would like to keep a focus on having strong fundamentals. This desire to have strong fundamentals is what informs my decisions on what to learn and in what order. Languages JavaScript Many sources online say you should take either JavaScript or Python as your first language. I like that JavaScript has more of a closeness to C-syntax since C is a high priority on my list of languages to learn. With JavaScript I can build and interact with the full stack of web development. I can work from browser to server. This means the skills I learn can be applied to more places. JavaScript is thought of having a closeness to Lisp. So this also feeds in to my desire to learn Lisp. In learning JavaScript I believe it will be easy to crossover into Python. But I don\u0026rsquo;t think it would be as easy the other way around. In the end, Python being a very important language, I will still get to learning it at some point no matter what. It\u0026rsquo;s important to really grokk one language. Then it will be easier to pick up the rest because I will actually understand the core principles of programming. Sort of like mastering one key in song writing. Then later it will be easy to pick up the rest of the keys. JavaScript works in the browser which means that I can build little applications that can run in browser. No need to download anything. Lisp/Elisp I learned lisp because of reading that it will help you to be a better programming. However they also say it shouldn\u0026rsquo;t be your first language. As a result of learning lisp I was lead towards Emacs Emacs I believe also helps me to be a better programmer All of the greatest engineers in the world use emacs\nEmacs is the 100 year editor\nYou have to be way smart to use emacs well and it makes you incredibily powerful if you can master it.\nI find there is a certain power in being able to customize your tools. And once you get the hang of it customizing it is actually quite simple\nThe great programmers, on the other hand, will adapt their environment to suit themselves, in such ways as writing scripts or their own tools, or extending their tools.\nEmacs gives me inspiration to keep learing lisp and by extension programming fundamentals in general. Emacs is a mix of C and [Emacs-]Lisp so it re enforces my skills in each of those areas. C C, even more so then C++, seems to be at the core of computer programming and computer science in general. With C I\u0026rsquo;m indirectly developing skills in most other languages. C gives you an appreciation of how computers work. Blockchain I find blockchain technology facinating. I love the mix of technology, economics, and finance. I\u0026rsquo;m intersted in the GameFi space. But I\u0026rsquo;m also very interested in DeFi, general tokenomics and DAO space. Summary The tech, computer science and programming landscape is vast. The things above are my core interest but for sure I\u0026rsquo;m very intersted in various aspects of computer science and tech. ","permalink":"http://localhost:1313/posts/tech_i_m_interested_in/","summary":"\u003ch2 id=\"focus-on-the-fundamentals\"\u003eFocus on the Fundamentals\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eIn all of my learning of programming and computer science I would like to keep a focus on having strong fundamentals. This desire to have strong fundamentals is what informs my decisions on what to learn and in what order.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"languages\"\u003eLanguages\u003c/h2\u003e\n\u003ch3 id=\"javascript\"\u003eJavaScript\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eMany sources online say you should take either JavaScript or Python as your first language.\u003c/li\u003e\n\u003cli\u003eI like that JavaScript has more of a closeness to C-syntax since C is a high priority on my list of languages to learn.\u003c/li\u003e\n\u003cli\u003eWith JavaScript I can build and interact with the full stack of web development. I can work from browser to server. This means the skills I learn can be applied to more places.\u003c/li\u003e\n\u003cli\u003eJavaScript is thought of having a closeness to Lisp. So this also feeds in to my desire to learn Lisp.\u003c/li\u003e\n\u003cli\u003eIn learning JavaScript I believe it will be easy to crossover into Python. But I don\u0026rsquo;t think it would be as easy the other way around.  In the end, Python being a very important language, I will still get to learning it at some point no matter what.\u003c/li\u003e\n\u003cli\u003eIt\u0026rsquo;s important to really grokk one language. Then it will be easier to pick up the rest because I will actually understand the core principles of programming.\n\u003cul\u003e\n\u003cli\u003eSort of like mastering one key in song writing. Then later it will be easy to pick up the rest of the keys.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eJavaScript works in the browser which means that I can build little applications that can run in browser. No need to download anything.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"lisp-elisp\"\u003eLisp/Elisp\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eI learned lisp because of reading that it will help you to be a better programming. However they also say it shouldn\u0026rsquo;t be your first language.\u003c/li\u003e\n\u003cli\u003eAs a result of learning lisp I was lead towards Emacs\u003c/li\u003e\n\u003cli\u003eEmacs I believe also helps me to be a better programmer\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eAll of the greatest engineers in the world use emacs\u003c/p\u003e","title":"Tech I'm Intersted In"},{"content":"","permalink":"http://localhost:1313/posts/find-closest-number-to-zero/","summary":"","title":"Find Closest Number To Zero"},{"content":"The lambda calculus is a foundational mathematical framework for studying functions. It forms the bedrock of functional programming, offering a powerful and elegant way to define and manipulate functions. Emacs Lisp, a dialect of Lisp heavily used within the Emacs editor, offers a flexible environment for exploring these concepts.\nIn this article, we\u0026rsquo;ll embark on a journey to understand how the lambda calculus is expressed within Emacs Lisp, using illustrative examples to highlight the core concepts.\nFunctions as Lambda Expressions Let\u0026rsquo;s begin by considering a simple function that adds 3 to a given number:\n(let ((x 20)) (+ x 3)) This code defines a function using the let construct, binding the variable x to the value 20 and then performing the addition. We can rewrite this using a lambda expression, a core construct of the lambda calculus:\n((lambda (x) (+ x 3)) 20) Here, we define a lambda function (lambda (x) (+ x 3)), which takes a single argument x and returns the result of adding 3 to it. The argument 20 is then passed to this function, yielding the same result as the previous let expression.\nNested Lambdas: Simulating let* The let* construct in Emacs Lisp allows for sequential binding of variables, where each subsequent variable can refer to previously defined ones. Let\u0026rsquo;s consider an example:\n(let* ((x 20) (y x) ) x) This code first binds x to 20 and then binds y to the value of x. It then returns the value of x. We can mimic this behavior with nested lambda functions:\n((lambda (x) ((lambda (y) x) x)) 20) The outer lambda binds x to 20. The inner lambda binds y to the value of x but ultimately returns the value of x, demonstrating that the binding of y doesn\u0026rsquo;t affect the result.\nCurrying: A Functional Approach The nested lambda functions used above hint at a core concept in functional programming: currying. Currying transforms a function that takes multiple arguments into a series of functions, each taking a single argument. While not strictly currying, the nested lambda functions in the previous example illustrate a similar approach.\nThe outer lambda takes the first argument (x) and then returns the inner lambda, which takes the second argument (y). While the inner lambda in this example ignores the value of y, currying allows us to build up functions incrementally, one argument at a time.\nConclusion Exploring the lambda calculus within Emacs Lisp provides valuable insights into the functional programming paradigm. By understanding how lambda expressions work and how they can be used to express concepts like let*, we gain a deeper understanding of the power and elegance of functional programming. As you continue your journey through the world of functional programming, remember that the lambda calculus is a potent tool, offering a unique and powerful way to represent and manipulate functions.\n","permalink":"http://localhost:1313/posts/expressing-lambda-calculus-in-emacs-lisp/","summary":"\u003cp\u003eThe lambda calculus is a foundational mathematical framework for studying functions. It forms the bedrock of functional programming, offering a powerful and elegant way to define and manipulate functions. Emacs Lisp, a dialect of Lisp heavily used within the Emacs editor, offers a flexible environment for exploring these concepts.\u003c/p\u003e\n\u003cp\u003eIn this article, we\u0026rsquo;ll embark on a journey to understand how the lambda calculus is expressed within Emacs Lisp, using illustrative examples to highlight the core concepts.\u003c/p\u003e","title":"Expressing Lambda Calculus in Emacs Lisp"},{"content":"Overview Endo can be used as a form of composition by concating functions. In this concatination functions results are fed into the concatted function.\nThe value is fed into Endo\u0026rsquo;s run function providing opportunities for lazy operations.\nI\u0026rsquo;m purposely being extremely explicit because I make to make sure that I understand each step of these functional implementations. ## Examples\nExample 1 // Endo monoid declaration // Endo :: (a -\u0026gt; a) -\u0026gt; Endo a const Endo = run =\u0026gt; ({ run, // concat :: Endo a -\u0026gt; Endo a -\u0026gt; Endo a concat: other =\u0026gt; Endo(x =\u0026gt; run(other.run(x))) }) // Endo.empty :: () -\u0026gt; Endo a Endo.empty = () =\u0026gt; Endo(x =\u0026gt; x) // List monad for putting functions into a list. // List :: [a] -\u0026gt; List a const List = list =\u0026gt; ({ list, // map :: (a -\u0026gt; b) -\u0026gt; List a -\u0026gt; List b map: fn =\u0026gt; List(list.map(fn)), // fold :: ((b, a) -\u0026gt; b, b) -\u0026gt; List a -\u0026gt; List b fold: (fn, initialValue) =\u0026gt; List(list.reduce(fn, initialValue)), // foldMap :: (a -\u0026gt; b) -\u0026gt; b -\u0026gt; List a -\u0026gt; b foldMap: (monoid, empty) =\u0026gt; { return empty != null ? list.reduce((acc, x, i) =\u0026gt; acc.concat(monoid(x, i)), empty) : list.map(monoid).reduce((acc, x) =\u0026gt; acc.concat(x)) }, // extract :: () -\u0026gt; [a] extract: () =\u0026gt; list, }) // Utility functions // compose :: (b -\u0026gt; c) -\u0026gt; (a -\u0026gt; b) -\u0026gt; a -\u0026gt; c const compose = f =\u0026gt; g =\u0026gt; x =\u0026gt; f(g(x)) // curry :: ((a, b) -\u0026gt; c) -\u0026gt; a -\u0026gt; b -\u0026gt; c const curry = f =\u0026gt; a =\u0026gt; b =\u0026gt; f(a, b) // toUpper :: String -\u0026gt; String const toUpper = str =\u0026gt; str.toUpperCase() // exclaim :: String -\u0026gt; String const exclaim = str =\u0026gt; `${str}!!` // to OrgHeader :: String -\u0026gt; String const toOrgHeader = str =\u0026gt; `* ${str}` // toOrgTagList :: [String] -\u0026gt; String const toOrgTagList = xs =\u0026gt; List(xs) .map((tag, index) =\u0026gt; !index ? `:${tag}:` : `${tag}:` ) .fold((accumalator,tag, index) =\u0026gt; accumalator.concat(tag) ,\u0026#39;\u0026#39;) .extract() // Tag list for header const tags = [\u0026#39;javascript\u0026#39;, \u0026#39;completed\u0026#39;, \u0026#39;moved\u0026#39;] // addTagsToHeader :: [String] -\u0026gt; String -\u0026gt; String const addTagsToHeader = curry((tagList,str) =\u0026gt; `${str} ${tagList}`) console.log(addTagsToHeader(toOrgTagList(tags))(\u0026#34;A Header\u0026#34;)) const result = List([addTagsToHeader(toOrgTagList(tags)),toOrgHeader, toUpper, exclaim]).foldMap(Endo, Endo.empty(\u0026#39;\u0026#39;)).run(\u0026#39;hello\u0026#39;) //\u0026gt; A Header :javascript:completed:moved: console.log(result) //\u0026gt; HELLO!! :javascript:completed:moved: ","permalink":"http://localhost:1313/posts/endo-monoid/","summary":"\u003ch2 id=\"overview\"\u003eOverview\u003c/h2\u003e\n\u003cp\u003eEndo can be used as a form of composition by concating functions. In this concatination functions results are fed into the concatted function.\u003c/p\u003e\n\u003cp\u003eThe value is fed into Endo\u0026rsquo;s run function providing opportunities for lazy operations.\u003c/p\u003e\n\u003cp\u003eI\u0026rsquo;m purposely being extremely explicit because I make to make sure that I understand each step of these functional implementations.\n## Examples\u003c/p\u003e\n\u003ch4 id=\"example-1\"\u003eExample 1\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Endo monoid declaration\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Endo :: (a -\u0026gt; a) -\u0026gt; Endo a\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eEndo\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003erun\u003c/span\u003e =\u0026gt; ({\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003erun\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// concat :: Endo a -\u0026gt; Endo a -\u0026gt; Endo a\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#a6e22e\"\u003econcat\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eother\u003c/span\u003e =\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eEndo\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003erun\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eother\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003erun\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Endo.empty :: () -\u0026gt; Endo a\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eEndo\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eempty\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e () =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003eEndo\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// List monad for putting functions into a list.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// List :: [a] -\u0026gt; List a\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eList\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e =\u0026gt; ({\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// map :: (a -\u0026gt; b) -\u0026gt; List a -\u0026gt; List b\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#a6e22e\"\u003emap\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efn\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003eList\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003emap\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003efn\u003c/span\u003e)),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// fold :: ((b, a) -\u0026gt; b, b) -\u0026gt; List a -\u0026gt; List b\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#a6e22e\"\u003efold\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003efn\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003einitialValue\u003c/span\u003e) =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003eList\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ereduce\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003efn\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003einitialValue\u003c/span\u003e)),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// foldMap :: (a -\u0026gt; b) -\u0026gt; b -\u0026gt; List a -\u0026gt; b\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#a6e22e\"\u003efoldMap\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003emonoid\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eempty\u003c/span\u003e) =\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eempty\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ereduce\u003c/span\u003e((\u003cspan style=\"color:#a6e22e\"\u003eacc\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e) =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003eacc\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003econcat\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003emonoid\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e)), \u003cspan style=\"color:#a6e22e\"\u003eempty\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003emap\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003emonoid\u003c/span\u003e).\u003cspan style=\"color:#a6e22e\"\u003ereduce\u003c/span\u003e((\u003cspan style=\"color:#a6e22e\"\u003eacc\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e) =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003eacc\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003econcat\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e))      },\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// extract :: () -\u0026gt; [a]\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#a6e22e\"\u003eextract\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e () =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Utility functions\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// compose :: (b -\u0026gt; c) -\u0026gt; (a -\u0026gt; b) -\u0026gt; a -\u0026gt; c\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecompose\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003eg\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eg\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// curry :: ((a, b) -\u0026gt; c) -\u0026gt; a -\u0026gt; b -\u0026gt; c\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecurry\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// toUpper :: String -\u0026gt; String\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etoUpper\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estr\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003estr\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003etoUpperCase\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// exclaim :: String -\u0026gt; String\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eexclaim\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estr\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#e6db74\"\u003e`\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003estr\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e!!`\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// to OrgHeader :: String -\u0026gt; String\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etoOrgHeader\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estr\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#e6db74\"\u003e`* \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003estr\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e`\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// toOrgTagList :: [String] -\u0026gt; String\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etoOrgTagList\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003exs\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003eList\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003exs\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      .\u003cspan style=\"color:#a6e22e\"\u003emap\u003c/span\u003e((\u003cspan style=\"color:#a6e22e\"\u003etag\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eindex\u003c/span\u003e) =\u0026gt; \u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eindex\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e`:\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003etag\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e:`\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e`\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003etag\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e:`\u003c/span\u003e )\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      .\u003cspan style=\"color:#a6e22e\"\u003efold\u003c/span\u003e((\u003cspan style=\"color:#a6e22e\"\u003eaccumalator\u003c/span\u003e,\u003cspan style=\"color:#a6e22e\"\u003etag\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eindex\u003c/span\u003e) =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003eaccumalator\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003econcat\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003etag\u003c/span\u003e) ,\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      .\u003cspan style=\"color:#a6e22e\"\u003eextract\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Tag list for header\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etags\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e [\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;javascript\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;completed\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;moved\u0026#39;\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// addTagsToHeader :: [String] -\u0026gt; String -\u0026gt; String\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eaddTagsToHeader\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#a6e22e\"\u003ecurry\u003c/span\u003e((\u003cspan style=\"color:#a6e22e\"\u003etagList\u003c/span\u003e,\u003cspan style=\"color:#a6e22e\"\u003estr\u003c/span\u003e) =\u0026gt; \u003cspan style=\"color:#e6db74\"\u003e`\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003estr\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003etagList\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e`\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003econsole\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eaddTagsToHeader\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003etoOrgTagList\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003etags\u003c/span\u003e))(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;A Header\u0026#34;\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eresult\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eList\u003c/span\u003e([\u003cspan style=\"color:#a6e22e\"\u003eaddTagsToHeader\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003etoOrgTagList\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003etags\u003c/span\u003e)),\u003cspan style=\"color:#a6e22e\"\u003etoOrgHeader\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003etoUpper\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eexclaim\u003c/span\u003e]).\u003cspan style=\"color:#a6e22e\"\u003efoldMap\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eEndo\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eEndo\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eempty\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e)).\u003cspan style=\"color:#a6e22e\"\u003erun\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;hello\u0026#39;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e//\u0026gt; A Header :javascript:completed:moved:\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003econsole\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eresult\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e//\u0026gt; HELLO!! :javascript:completed:moved:\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"The Endo Monoid"},{"content":"Overview This is essential a map of content for functional programming concepts that I\u0026rsquo;m learning.\nList Monad ","permalink":"http://localhost:1313/posts/functional-programming/","summary":"\u003ch2 id=\"overview\"\u003eOverview\u003c/h2\u003e\n\u003cp\u003eThis is essential a map of content for functional programming concepts that I\u0026rsquo;m learning.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"/posts/list-monad/\"\u003eList Monad\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","title":"Functional Programming Concepts"},{"content":"Thoughts I\u0026rsquo;m writing this more as a way to document and organize my thoughts around the list monad.\nThis is a very important monad.\nA map of functional concepts I\u0026rsquo;m currently studying can be found at Functional Programming Concepts.\nThe Code export const List = list =\u0026gt; ({ list, map: fn =\u0026gt; List(list.map(fn)), fold: (fn, initialValue) =\u0026gt; List(list.reduce(fn, initialValue)), foldMap(monoid, empty) { const mappedList = list.reduce(fn, initialValue); const result = mappedList.reduce( (accumalator, monoidValue) =\u0026gt; accumalator.concat(monoidValue), empty, ); return List(result); }, extract: () =\u0026gt; list, }); Example Here is a sample implementation of this list monad.\nList([1, 2, 3, 4]).map(x =\u0026gt; x + 1) //\u0026gt; [2,3,4,5] List([\u0026#34;red\u0026#34;, \u0026#34;Blue\u0026#34;, \u0026#34;Yellow\u0026#34;, \u0026#34;Green\u0026#34;]).(str =\u0026gt; str.toUpperCase()) //\u0026gt; [\u0026#34;RED\u0026#34;, \u0026#34;BLUE\u0026#34;, \u0026#34;YELLOW\u0026#34;, \u0026#34;GREEN\u0026#34;] Github A current version of my implementation of this list monad can be found here.\n","permalink":"http://localhost:1313/posts/list-monad/","summary":"\u003ch2 id=\"thoughts\"\u003eThoughts\u003c/h2\u003e\n\u003cp\u003eI\u0026rsquo;m writing this more as a way to document and organize my thoughts around the list monad.\u003c/p\u003e\n\u003cp\u003eThis is a very important monad.\u003c/p\u003e\n\u003cp\u003eA map of functional concepts I\u0026rsquo;m currently studying can be found at \u003ca href=\"/posts/functional-programming/\"\u003eFunctional Programming Concepts\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"the-code\"\u003eThe Code\u003c/h2\u003e\n\u003cp\u003e\u003ca id=\"code-snippet--list-monad\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eexport\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eList\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e =\u0026gt; ({\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003emap\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efn\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003eList\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003emap\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003efn\u003c/span\u003e)),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003efold\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003efn\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003einitialValue\u003c/span\u003e) =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003eList\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ereduce\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003efn\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003einitialValue\u003c/span\u003e)),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003efoldMap\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003emonoid\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eempty\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emappedList\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ereduce\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003efn\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003einitialValue\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eresult\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emappedList\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ereduce\u003c/span\u003e(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      (\u003cspan style=\"color:#a6e22e\"\u003eaccumalator\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003emonoidValue\u003c/span\u003e) =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003eaccumalator\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003econcat\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003emonoidValue\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#a6e22e\"\u003eempty\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    );\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eList\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eresult\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  },\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003eextract\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e () =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e});\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"example\"\u003eExample\u003c/h3\u003e\n\u003cp\u003eHere is a sample implementation of this list monad.\u003c/p\u003e","title":"List Monad in JavaScript"},{"content":"Introduction Emacs Capture Templates Org-Roam Browser Browser Options Capture Templates ","permalink":"http://localhost:1313/posts/my-zettelkasten-workflow/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003ch2 id=\"emacs\"\u003eEmacs\u003c/h2\u003e\n\u003ch3 id=\"capture-templates\"\u003eCapture Templates\u003c/h3\u003e\n\u003ch2 id=\"org-roam\"\u003eOrg-Roam\u003c/h2\u003e\n\u003ch2 id=\"browser\"\u003eBrowser\u003c/h2\u003e\n\u003ch3 id=\"browser-options\"\u003eBrowser Options\u003c/h3\u003e\n\u003ch3 id=\"capture-templates\"\u003eCapture Templates\u003c/h3\u003e","title":"My Zettelkasten Workflow"},{"content":"Writing Lisp Code is Easy However good Lisp programming is hard according to Richard P. Gabriel. Lisp is extremely hackable It\u0026rsquo;s easy to create a Lisp Language It\u0026rsquo;s Easy to Make a Lisp Language Domain Specific Writing a parser and compiler for Lisp is way claner than other languages Emacs is configured with Lisp Lisp Helps Me with My Programmatic Thinking Once you know Lisp you think of programming in a very different way. Lisp has heavy ties to Functional Programming My interested in mathematics has motivated my interest in functional programming. A lot of functional programming ideas implemented in other programming languages started in Lisp. A lot of academic computer science work uses Lisp. Common Lisp\u0026rsquo;s Object-Oriented System is Great Development of programs in Lisp advance faster then in other languages Its easy to build a prototype of an idea in Lisp.\nMany programms have started as Emacs packages.\nThe discretionary exportable functionality entrusted to the individual Lisp programmer is more than an order of magnitude greater than that to be found within Pascal enterprises. - Alan J. Perlis\nDevelopment of programs in Lisp proceeds somewhere between 1000 and 5000 times faster then development in \u0026ldquo;modern\u0026rdquo; or \u0026ldquo;improved\u0026rdquo; computer languages. - Douglas Lenat Lex Fridman Podcast\nYou can hire fewer people, by 80%, by developing in Lisp. - Eric Normand\nYou don\u0026rsquo;t need a lot of dependencies to get your project off in Lisp\n","permalink":"http://localhost:1313/posts/why-lisp/","summary":"\u003ch2 id=\"writing-lisp-code-is-easy\"\u003eWriting Lisp Code is Easy\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHowever good Lisp programming is hard according to Richard P. Gabriel.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"lisp-is-extremely-hackable\"\u003eLisp is extremely hackable\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eIt\u0026rsquo;s easy to create a Lisp Language\u003c/li\u003e\n\u003cli\u003eIt\u0026rsquo;s Easy to Make a Lisp Language Domain Specific\u003c/li\u003e\n\u003cli\u003eWriting a parser and compiler for Lisp is way claner than other languages\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"emacs-is-configured-with-lisp\"\u003eEmacs is configured with Lisp\u003c/h2\u003e\n\u003ch2 id=\"lisp-helps-me-with-my-programmatic-thinking\"\u003eLisp Helps Me with My Programmatic Thinking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOnce you know Lisp you think of programming in a very different way.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"lisp-has-heavy-ties-to-functional-programming\"\u003eLisp has heavy ties to Functional Programming\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eMy interested in mathematics has motivated my interest in functional programming.\u003c/li\u003e\n\u003cli\u003eA lot of functional programming ideas implemented in other programming languages started in Lisp.\u003c/li\u003e\n\u003cli\u003eA lot of academic computer science work uses Lisp.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"common-lisp-s-object-oriented-system-is-great\"\u003eCommon Lisp\u0026rsquo;s Object-Oriented System is Great\u003c/h2\u003e\n\u003ch2 id=\"development-of-programs-in-lisp-advance-faster-then-in-other-languages\"\u003eDevelopment of programs in Lisp advance faster then in other languages\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eIts easy to build a prototype of an idea in Lisp.\u003c/p\u003e","title":"Why Lisp?"},{"content":"Focus on the Fundamentals In all of my learning of programming and computer science I would like to keep a focus on having strong fundamentals. This desire to have strong fundamentals is what informs my decisions on what to learn and in what order. Languages JavaScript Many sources online say you should take either JavaScript or Python as your first language. I like that JavaScript has more of a closeness to C-syntax since C is a high priority on my list of languages to learn. With JavaScript I can build and interact with the full stack of web development. I can work from browser to server. This means the skills I learn can be applied to more places. JavaScript is thought of having a closeness to Lisp. So this also feeds in to my desire to learn Lisp. In learning JavaScript I believe it will be easy to crossover into Python. But I don\u0026rsquo;t think it would be as easy the other way around. In the end, Python being a very important language, I will still get to learning it at some point no matter what. It\u0026rsquo;s important to really grokk one language. Then it will be easier to pick up the rest because I will actually understand the core principles of programming. Sort of like mastering one key in song writing. Then later it will be easy to pick up the rest of the keys. JavaScript works in the browser which means that I can build little applications that can run in browser. No need to download anything. Lisp/Elisp I learned lisp because of reading that it will help you to be a better programming. However they also say it shouldn\u0026rsquo;t be your first language. As a result of learning lisp I was lead towards Emacs Emacs I believe also helps me to be a better programmer All of the greatest engineers in the world use emacs\nEmacs is the 100 year editor\nYou have to be way smart to use emacs well and it makes you incredibily powerful if you can master it.\nI find there is a certain power in being able to customize your tools. And once you get the hang of it customizing it is actually quite simple\nThe great programmers, on the other hand, will adapt their environment to suit themselves, in such ways as writing scripts or their own tools, or extending their tools.\nEmacs gives me inspiration to keep learing lisp and by extension programming fundamentals in general. Emacs is a mix of C and [Emacs-]Lisp so it re enforces my skills in each of those areas. C C, even more so then C++, seems to be at the core of computer programming and computer science in general. With C I\u0026rsquo;m indirectly developing skills in most other languages. C gives you an appreciation of how computers work. Blockchain I find blockchain technology facinating. I love the mix of technology, economics, and finance. I\u0026rsquo;m intersted in the GameFi space. But I\u0026rsquo;m also very interested in DeFi, general tokenomics and DAO space. Summary The tech, computer science and programming landscape is vast. The things above are my core interest but for sure I\u0026rsquo;m very intersted in various aspects of computer science and tech. ","permalink":"http://localhost:1313/posts/tech_i_m_interested_in/","summary":"\u003ch2 id=\"focus-on-the-fundamentals\"\u003eFocus on the Fundamentals\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eIn all of my learning of programming and computer science I would like to keep a focus on having strong fundamentals. This desire to have strong fundamentals is what informs my decisions on what to learn and in what order.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"languages\"\u003eLanguages\u003c/h2\u003e\n\u003ch3 id=\"javascript\"\u003eJavaScript\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eMany sources online say you should take either JavaScript or Python as your first language.\u003c/li\u003e\n\u003cli\u003eI like that JavaScript has more of a closeness to C-syntax since C is a high priority on my list of languages to learn.\u003c/li\u003e\n\u003cli\u003eWith JavaScript I can build and interact with the full stack of web development. I can work from browser to server. This means the skills I learn can be applied to more places.\u003c/li\u003e\n\u003cli\u003eJavaScript is thought of having a closeness to Lisp. So this also feeds in to my desire to learn Lisp.\u003c/li\u003e\n\u003cli\u003eIn learning JavaScript I believe it will be easy to crossover into Python. But I don\u0026rsquo;t think it would be as easy the other way around.  In the end, Python being a very important language, I will still get to learning it at some point no matter what.\u003c/li\u003e\n\u003cli\u003eIt\u0026rsquo;s important to really grokk one language. Then it will be easier to pick up the rest because I will actually understand the core principles of programming.\n\u003cul\u003e\n\u003cli\u003eSort of like mastering one key in song writing. Then later it will be easy to pick up the rest of the keys.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eJavaScript works in the browser which means that I can build little applications that can run in browser. No need to download anything.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"lisp-elisp\"\u003eLisp/Elisp\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eI learned lisp because of reading that it will help you to be a better programming. However they also say it shouldn\u0026rsquo;t be your first language.\u003c/li\u003e\n\u003cli\u003eAs a result of learning lisp I was lead towards Emacs\u003c/li\u003e\n\u003cli\u003eEmacs I believe also helps me to be a better programmer\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eAll of the greatest engineers in the world use emacs\u003c/p\u003e","title":"Tech I'm Intersted In"},{"content":"This is some text\n","permalink":"http://localhost:1313/posts/find-closest-number-to-zero/","summary":"\u003cp\u003eThis is some text\u003c/p\u003e","title":"Find Closest Number To Zero"}]