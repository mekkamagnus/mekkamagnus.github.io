<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>monads on Mekael Turner Dev Blog</title><link>https://mekkamagnus.github.io/tags/monads/</link><description>Recent content in monads on Mekael Turner Dev Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 07 Oct 2023 00:00:00 +0800</lastBuildDate><atom:link href="https://mekkamagnus.github.io/tags/monads/index.xml" rel="self" type="application/rss+xml"/><item><title>List Monad in JavaScript</title><link>https://mekkamagnus.github.io/posts/list-monad/</link><pubDate>Sat, 07 Oct 2023 00:00:00 +0800</pubDate><guid>https://mekkamagnus.github.io/posts/list-monad/</guid><description>Thoughts I&amp;rsquo;m writing this more as a way to document and organize my thoughts around the list monad.
This is a very important monad.
A map of functional concepts I&amp;rsquo;m currently studying can be found at Functional Programming Concepts.
The Code export const List = list =&amp;gt; ({ list, map: fn =&amp;gt; List(list.map(fn)), fold: (fn, initialValue) =&amp;gt; List(list.reduce(fn, initialValue)), foldMap(monoid, empty) { const mappedList = list.reduce(fn, initialValue); const result = mappedList.</description></item></channel></rss>