[{"content":"The lambda calculus is a foundational mathematical framework for studying functions. It forms the bedrock of functional programming, offering a powerful and elegant way to define and manipulate functions. Emacs Lisp, a dialect of Lisp heavily used within the Emacs editor, offers a flexible environment for exploring these concepts.\nIn this article, we\u0026rsquo;ll embark on a journey to understand how the lambda calculus is expressed within Emacs Lisp, using illustrative examples to highlight the core concepts.\nFunctions as Lambda Expressions Let\u0026rsquo;s begin by considering a simple function that adds 3 to a given number:\n(let ((x 20)) (+ x 3)) This code defines a function using the let construct, binding the variable x to the value 20 and then performing the addition. We can rewrite this using a lambda expression, a core construct of the lambda calculus:\n((lambda (x) (+ x 3)) 20) Here, we define a lambda function (lambda (x) (+ x 3)), which takes a single argument x and returns the result of adding 3 to it. The argument 20 is then passed to this function, yielding the same result as the previous let expression.\nNested Lambdas: Simulating let* The let* construct in Emacs Lisp allows for sequential binding of variables, where each subsequent variable can refer to previously defined ones. Let\u0026rsquo;s consider an example:\n(let* ((x 20) (y x) ) x) This code first binds x to 20 and then binds y to the value of x. It then returns the value of x. We can mimic this behavior with nested lambda functions:\n((lambda (x) ((lambda (y) x) x)) 20) The outer lambda binds x to 20. The inner lambda binds y to the value of x but ultimately returns the value of x, demonstrating that the binding of y doesn\u0026rsquo;t affect the result.\nCurrying: A Functional Approach The nested lambda functions used above hint at a core concept in functional programming: currying. Currying transforms a function that takes multiple arguments into a series of functions, each taking a single argument. While not strictly currying, the nested lambda functions in the previous example illustrate a similar approach.\nThe outer lambda takes the first argument (x) and then returns the inner lambda, which takes the second argument (y). While the inner lambda in this example ignores the value of y, currying allows us to build up functions incrementally, one argument at a time.\nConclusion Exploring the lambda calculus within Emacs Lisp provides valuable insights into the functional programming paradigm. By understanding how lambda expressions work and how they can be used to express concepts like let*, we gain a deeper understanding of the power and elegance of functional programming. As you continue your journey through the world of functional programming, remember that the lambda calculus is a potent tool, offering a unique and powerful way to represent and manipulate functions.\n","permalink":"https://mekkamagnus.github.io/posts/expressing-lambda-calculus-in-emacs-lisp/","summary":"\u003cp\u003eThe lambda calculus is a foundational mathematical framework for studying functions. It forms the bedrock of functional programming, offering a powerful and elegant way to define and manipulate functions. Emacs Lisp, a dialect of Lisp heavily used within the Emacs editor, offers a flexible environment for exploring these concepts.\u003c/p\u003e\n\u003cp\u003eIn this article, we\u0026rsquo;ll embark on a journey to understand how the lambda calculus is expressed within Emacs Lisp, using illustrative examples to highlight the core concepts.\u003c/p\u003e","title":"Expressing Lambda Calculus in Emacs Lisp"},{"content":"Overview Endo can be used as a form of composition by concating functions. In this concatination functions results are fed into the concatted function.\nThe value is fed into Endo\u0026rsquo;s run function providing opportunities for lazy operations.\nI\u0026rsquo;m purposely being extremely explicit because I make to make sure that I understand each step of these functional implementations. ## Examples\nExample 1 // Endo monoid declaration // Endo :: (a -\u0026gt; a) -\u0026gt; Endo a const Endo = run =\u0026gt; ({ run, // concat :: Endo a -\u0026gt; Endo a -\u0026gt; Endo a concat: other =\u0026gt; Endo(x =\u0026gt; run(other.run(x))) }) // Endo.empty :: () -\u0026gt; Endo a Endo.empty = () =\u0026gt; Endo(x =\u0026gt; x) // List monad for putting functions into a list. // List :: [a] -\u0026gt; List a const List = list =\u0026gt; ({ list, // map :: (a -\u0026gt; b) -\u0026gt; List a -\u0026gt; List b map: fn =\u0026gt; List(list.map(fn)), // fold :: ((b, a) -\u0026gt; b, b) -\u0026gt; List a -\u0026gt; List b fold: (fn, initialValue) =\u0026gt; List(list.reduce(fn, initialValue)), // foldMap :: (a -\u0026gt; b) -\u0026gt; b -\u0026gt; List a -\u0026gt; b foldMap: (monoid, empty) =\u0026gt; { return empty != null ? list.reduce((acc, x, i) =\u0026gt; acc.concat(monoid(x, i)), empty) : list.map(monoid).reduce((acc, x) =\u0026gt; acc.concat(x)) }, // extract :: () -\u0026gt; [a] extract: () =\u0026gt; list, }) // Utility functions // compose :: (b -\u0026gt; c) -\u0026gt; (a -\u0026gt; b) -\u0026gt; a -\u0026gt; c const compose = f =\u0026gt; g =\u0026gt; x =\u0026gt; f(g(x)) // curry :: ((a, b) -\u0026gt; c) -\u0026gt; a -\u0026gt; b -\u0026gt; c const curry = f =\u0026gt; a =\u0026gt; b =\u0026gt; f(a, b) // toUpper :: String -\u0026gt; String const toUpper = str =\u0026gt; str.toUpperCase() // exclaim :: String -\u0026gt; String const exclaim = str =\u0026gt; `${str}!!` // to OrgHeader :: String -\u0026gt; String const toOrgHeader = str =\u0026gt; `* ${str}` // toOrgTagList :: [String] -\u0026gt; String const toOrgTagList = xs =\u0026gt; List(xs) .map((tag, index) =\u0026gt; !index ? `:${tag}:` : `${tag}:` ) .fold((accumalator,tag, index) =\u0026gt; accumalator.concat(tag) ,\u0026#39;\u0026#39;) .extract() // Tag list for header const tags = [\u0026#39;javascript\u0026#39;, \u0026#39;completed\u0026#39;, \u0026#39;moved\u0026#39;] // addTagsToHeader :: [String] -\u0026gt; String -\u0026gt; String const addTagsToHeader = curry((tagList,str) =\u0026gt; `${str} ${tagList}`) console.log(addTagsToHeader(toOrgTagList(tags))(\u0026#34;A Header\u0026#34;)) const result = List([addTagsToHeader(toOrgTagList(tags)),toOrgHeader, toUpper, exclaim]).foldMap(Endo, Endo.empty(\u0026#39;\u0026#39;)).run(\u0026#39;hello\u0026#39;) //\u0026gt; A Header :javascript:completed:moved: console.log(result) //\u0026gt; HELLO!! :javascript:completed:moved: ","permalink":"https://mekkamagnus.github.io/posts/endo-monoid/","summary":"\u003ch2 id=\"overview\"\u003eOverview\u003c/h2\u003e\n\u003cp\u003eEndo can be used as a form of composition by concating functions. In this concatination functions results are fed into the concatted function.\u003c/p\u003e\n\u003cp\u003eThe value is fed into Endo\u0026rsquo;s run function providing opportunities for lazy operations.\u003c/p\u003e\n\u003cp\u003eI\u0026rsquo;m purposely being extremely explicit because I make to make sure that I understand each step of these functional implementations.\n## Examples\u003c/p\u003e\n\u003ch4 id=\"example-1\"\u003eExample 1\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Endo monoid declaration\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Endo :: (a -\u0026gt; a) -\u0026gt; Endo a\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eEndo\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003erun\u003c/span\u003e =\u0026gt; ({\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003erun\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// concat :: Endo a -\u0026gt; Endo a -\u0026gt; Endo a\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#a6e22e\"\u003econcat\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eother\u003c/span\u003e =\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eEndo\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003erun\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eother\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003erun\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Endo.empty :: () -\u0026gt; Endo a\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eEndo\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eempty\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e () =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003eEndo\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// List monad for putting functions into a list.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// List :: [a] -\u0026gt; List a\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eList\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e =\u0026gt; ({\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// map :: (a -\u0026gt; b) -\u0026gt; List a -\u0026gt; List b\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#a6e22e\"\u003emap\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efn\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003eList\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003emap\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003efn\u003c/span\u003e)),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// fold :: ((b, a) -\u0026gt; b, b) -\u0026gt; List a -\u0026gt; List b\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#a6e22e\"\u003efold\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003efn\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003einitialValue\u003c/span\u003e) =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003eList\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ereduce\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003efn\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003einitialValue\u003c/span\u003e)),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// foldMap :: (a -\u0026gt; b) -\u0026gt; b -\u0026gt; List a -\u0026gt; b\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#a6e22e\"\u003efoldMap\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003emonoid\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eempty\u003c/span\u003e) =\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eempty\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ereduce\u003c/span\u003e((\u003cspan style=\"color:#a6e22e\"\u003eacc\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e) =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003eacc\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003econcat\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003emonoid\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e)), \u003cspan style=\"color:#a6e22e\"\u003eempty\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003emap\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003emonoid\u003c/span\u003e).\u003cspan style=\"color:#a6e22e\"\u003ereduce\u003c/span\u003e((\u003cspan style=\"color:#a6e22e\"\u003eacc\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e) =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003eacc\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003econcat\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e))      },\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// extract :: () -\u0026gt; [a]\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#a6e22e\"\u003eextract\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e () =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Utility functions\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// compose :: (b -\u0026gt; c) -\u0026gt; (a -\u0026gt; b) -\u0026gt; a -\u0026gt; c\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecompose\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003eg\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eg\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// curry :: ((a, b) -\u0026gt; c) -\u0026gt; a -\u0026gt; b -\u0026gt; c\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecurry\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003ef\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ea\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eb\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// toUpper :: String -\u0026gt; String\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etoUpper\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estr\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003estr\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003etoUpperCase\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// exclaim :: String -\u0026gt; String\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eexclaim\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estr\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#e6db74\"\u003e`\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003estr\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e!!`\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// to OrgHeader :: String -\u0026gt; String\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etoOrgHeader\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estr\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#e6db74\"\u003e`* \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003estr\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e`\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// toOrgTagList :: [String] -\u0026gt; String\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etoOrgTagList\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003exs\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003eList\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003exs\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      .\u003cspan style=\"color:#a6e22e\"\u003emap\u003c/span\u003e((\u003cspan style=\"color:#a6e22e\"\u003etag\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eindex\u003c/span\u003e) =\u0026gt; \u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eindex\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e`:\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003etag\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e:`\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e`\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003etag\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e:`\u003c/span\u003e )\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      .\u003cspan style=\"color:#a6e22e\"\u003efold\u003c/span\u003e((\u003cspan style=\"color:#a6e22e\"\u003eaccumalator\u003c/span\u003e,\u003cspan style=\"color:#a6e22e\"\u003etag\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eindex\u003c/span\u003e) =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003eaccumalator\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003econcat\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003etag\u003c/span\u003e) ,\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      .\u003cspan style=\"color:#a6e22e\"\u003eextract\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Tag list for header\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etags\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e [\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;javascript\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;completed\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;moved\u0026#39;\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// addTagsToHeader :: [String] -\u0026gt; String -\u0026gt; String\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eaddTagsToHeader\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#a6e22e\"\u003ecurry\u003c/span\u003e((\u003cspan style=\"color:#a6e22e\"\u003etagList\u003c/span\u003e,\u003cspan style=\"color:#a6e22e\"\u003estr\u003c/span\u003e) =\u0026gt; \u003cspan style=\"color:#e6db74\"\u003e`\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003estr\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003etagList\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e`\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003econsole\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eaddTagsToHeader\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003etoOrgTagList\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003etags\u003c/span\u003e))(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;A Header\u0026#34;\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eresult\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eList\u003c/span\u003e([\u003cspan style=\"color:#a6e22e\"\u003eaddTagsToHeader\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003etoOrgTagList\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003etags\u003c/span\u003e)),\u003cspan style=\"color:#a6e22e\"\u003etoOrgHeader\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003etoUpper\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eexclaim\u003c/span\u003e]).\u003cspan style=\"color:#a6e22e\"\u003efoldMap\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eEndo\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eEndo\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eempty\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e)).\u003cspan style=\"color:#a6e22e\"\u003erun\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;hello\u0026#39;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e//\u0026gt; A Header :javascript:completed:moved:\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003econsole\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eresult\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e//\u0026gt; HELLO!! :javascript:completed:moved:\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"The Endo Monoid"},{"content":"Overview This is essential a map of content for functional programming concepts that I\u0026rsquo;m learning.\nList Monad ","permalink":"https://mekkamagnus.github.io/posts/functional-programming/","summary":"\u003ch2 id=\"overview\"\u003eOverview\u003c/h2\u003e\n\u003cp\u003eThis is essential a map of content for functional programming concepts that I\u0026rsquo;m learning.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"/posts/list-monad/\"\u003eList Monad\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","title":"Functional Programming Concepts"},{"content":"Thoughts I\u0026rsquo;m writing this more as a way to document and organize my thoughts around the list monad.\nThis is a very important monad.\nA map of functional concepts I\u0026rsquo;m currently studying can be found at Functional Programming Concepts.\nThe Code export const List = list =\u0026gt; ({ list, map: fn =\u0026gt; List(list.map(fn)), fold: (fn, initialValue) =\u0026gt; List(list.reduce(fn, initialValue)), foldMap(monoid, empty) { const mappedList = list.reduce(fn, initialValue); const result = mappedList.reduce( (accumalator, monoidValue) =\u0026gt; accumalator.concat(monoidValue), empty, ); return List(result); }, extract: () =\u0026gt; list, }); Example Here is a sample implementation of this list monad.\nList([1, 2, 3, 4]).map(x =\u0026gt; x + 1) //\u0026gt; [2,3,4,5] List([\u0026#34;red\u0026#34;, \u0026#34;Blue\u0026#34;, \u0026#34;Yellow\u0026#34;, \u0026#34;Green\u0026#34;]).(str =\u0026gt; str.toUpperCase()) //\u0026gt; [\u0026#34;RED\u0026#34;, \u0026#34;BLUE\u0026#34;, \u0026#34;YELLOW\u0026#34;, \u0026#34;GREEN\u0026#34;] Github A current version of my implementation of this list monad can be found here.\n","permalink":"https://mekkamagnus.github.io/posts/list-monad/","summary":"\u003ch2 id=\"thoughts\"\u003eThoughts\u003c/h2\u003e\n\u003cp\u003eI\u0026rsquo;m writing this more as a way to document and organize my thoughts around the list monad.\u003c/p\u003e\n\u003cp\u003eThis is a very important monad.\u003c/p\u003e\n\u003cp\u003eA map of functional concepts I\u0026rsquo;m currently studying can be found at \u003ca href=\"/posts/functional-programming/\"\u003eFunctional Programming Concepts\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"the-code\"\u003eThe Code\u003c/h2\u003e\n\u003cp\u003e\u003ca id=\"code-snippet--list-monad\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eexport\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eList\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e =\u0026gt; ({\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003emap\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efn\u003c/span\u003e =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003eList\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003emap\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003efn\u003c/span\u003e)),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003efold\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003efn\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003einitialValue\u003c/span\u003e) =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003eList\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ereduce\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003efn\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003einitialValue\u003c/span\u003e)),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003efoldMap\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003emonoid\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eempty\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emappedList\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ereduce\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003efn\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003einitialValue\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eresult\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emappedList\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ereduce\u003c/span\u003e(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      (\u003cspan style=\"color:#a6e22e\"\u003eaccumalator\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003emonoidValue\u003c/span\u003e) =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003eaccumalator\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003econcat\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003emonoidValue\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#a6e22e\"\u003eempty\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    );\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eList\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eresult\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  },\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003eextract\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e () =\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e});\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"example\"\u003eExample\u003c/h3\u003e\n\u003cp\u003eHere is a sample implementation of this list monad.\u003c/p\u003e","title":"List Monad in JavaScript"},{"content":"Introduction Emacs Capture Templates Org-Roam Browser Browser Options Capture Templates ","permalink":"https://mekkamagnus.github.io/posts/my-zettelkasten-workflow/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003ch2 id=\"emacs\"\u003eEmacs\u003c/h2\u003e\n\u003ch3 id=\"capture-templates\"\u003eCapture Templates\u003c/h3\u003e\n\u003ch2 id=\"org-roam\"\u003eOrg-Roam\u003c/h2\u003e\n\u003ch2 id=\"browser\"\u003eBrowser\u003c/h2\u003e\n\u003ch3 id=\"browser-options\"\u003eBrowser Options\u003c/h3\u003e\n\u003ch3 id=\"capture-templates\"\u003eCapture Templates\u003c/h3\u003e","title":"My Zettelkasten Workflow"},{"content":"Writing Lisp Code is Easy However good Lisp programming is hard according to Richard P. Gabriel. Lisp is extremely hackable It\u0026rsquo;s easy to create a Lisp Language It\u0026rsquo;s Easy to Make a Lisp Language Domain Specific Writing a parser and compiler for Lisp is way claner than other languages Emacs is configured with Lisp Lisp Helps Me with My Programmatic Thinking Once you know Lisp you think of programming in a very different way. Lisp has heavy ties to Functional Programming My interested in mathematics has motivated my interest in functional programming. A lot of functional programming ideas implemented in other programming languages started in Lisp. A lot of academic computer science work uses Lisp. Common Lisp\u0026rsquo;s Object-Oriented System is Great Development of programs in Lisp advance faster then in other languages Its easy to build a prototype of an idea in Lisp.\nMany programms have started as Emacs packages.\nThe discretionary exportable functionality entrusted to the individual Lisp programmer is more than an order of magnitude greater than that to be found within Pascal enterprises. - Alan J. Perlis\nDevelopment of programs in Lisp proceeds somewhere between 1000 and 5000 times faster then development in \u0026ldquo;modern\u0026rdquo; or \u0026ldquo;improved\u0026rdquo; computer languages. - Douglas Lenat Lex Fridman Podcast\nYou can hire fewer people, by 80%, by developing in Lisp. - Eric Normand\nYou don\u0026rsquo;t need a lot of dependencies to get your project off in Lisp\n","permalink":"https://mekkamagnus.github.io/posts/why-lisp/","summary":"\u003ch2 id=\"writing-lisp-code-is-easy\"\u003eWriting Lisp Code is Easy\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHowever good Lisp programming is hard according to Richard P. Gabriel.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"lisp-is-extremely-hackable\"\u003eLisp is extremely hackable\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eIt\u0026rsquo;s easy to create a Lisp Language\u003c/li\u003e\n\u003cli\u003eIt\u0026rsquo;s Easy to Make a Lisp Language Domain Specific\u003c/li\u003e\n\u003cli\u003eWriting a parser and compiler for Lisp is way claner than other languages\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"emacs-is-configured-with-lisp\"\u003eEmacs is configured with Lisp\u003c/h2\u003e\n\u003ch2 id=\"lisp-helps-me-with-my-programmatic-thinking\"\u003eLisp Helps Me with My Programmatic Thinking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOnce you know Lisp you think of programming in a very different way.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"lisp-has-heavy-ties-to-functional-programming\"\u003eLisp has heavy ties to Functional Programming\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eMy interested in mathematics has motivated my interest in functional programming.\u003c/li\u003e\n\u003cli\u003eA lot of functional programming ideas implemented in other programming languages started in Lisp.\u003c/li\u003e\n\u003cli\u003eA lot of academic computer science work uses Lisp.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"common-lisp-s-object-oriented-system-is-great\"\u003eCommon Lisp\u0026rsquo;s Object-Oriented System is Great\u003c/h2\u003e\n\u003ch2 id=\"development-of-programs-in-lisp-advance-faster-then-in-other-languages\"\u003eDevelopment of programs in Lisp advance faster then in other languages\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eIts easy to build a prototype of an idea in Lisp.\u003c/p\u003e","title":"Why Lisp?"},{"content":"Focus on the Fundamentals In all of my learning of programming and computer science I would like to keep a focus on having strong fundamentals. This desire to have strong fundamentals is what informs my decisions on what to learn and in what order. Languages JavaScript Many sources online say you should take either JavaScript or Python as your first language. I like that JavaScript has more of a closeness to C-syntax since C is a high priority on my list of languages to learn. With JavaScript I can build and interact with the full stack of web development. I can work from browser to server. This means the skills I learn can be applied to more places. JavaScript is thought of having a closeness to Lisp. So this also feeds in to my desire to learn Lisp. In learning JavaScript I believe it will be easy to crossover into Python. But I don\u0026rsquo;t think it would be as easy the other way around. In the end, Python being a very important language, I will still get to learning it at some point no matter what. It\u0026rsquo;s important to really grokk one language. Then it will be easier to pick up the rest because I will actually understand the core principles of programming. Sort of like mastering one key in song writing. Then later it will be easy to pick up the rest of the keys. JavaScript works in the browser which means that I can build little applications that can run in browser. No need to download anything. Lisp/Elisp I learned lisp because of reading that it will help you to be a better programming. However they also say it shouldn\u0026rsquo;t be your first language. As a result of learning lisp I was lead towards Emacs Emacs I believe also helps me to be a better programmer All of the greatest engineers in the world use emacs\nEmacs is the 100 year editor\nYou have to be way smart to use emacs well and it makes you incredibily powerful if you can master it.\nI find there is a certain power in being able to customize your tools. And once you get the hang of it customizing it is actually quite simple\nThe great programmers, on the other hand, will adapt their environment to suit themselves, in such ways as writing scripts or their own tools, or extending their tools.\nEmacs gives me inspiration to keep learing lisp and by extension programming fundamentals in general. Emacs is a mix of C and [Emacs-]Lisp so it re enforces my skills in each of those areas. C C, even more so then C++, seems to be at the core of computer programming and computer science in general. With C I\u0026rsquo;m indirectly developing skills in most other languages. C gives you an appreciation of how computers work. Blockchain I find blockchain technology facinating. I love the mix of technology, economics, and finance. I\u0026rsquo;m intersted in the GameFi space. But I\u0026rsquo;m also very interested in DeFi, general tokenomics and DAO space. Summary The tech, computer science and programming landscape is vast. The things above are my core interest but for sure I\u0026rsquo;m very intersted in various aspects of computer science and tech. ","permalink":"https://mekkamagnus.github.io/posts/tech_i_m_interested_in/","summary":"\u003ch2 id=\"focus-on-the-fundamentals\"\u003eFocus on the Fundamentals\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eIn all of my learning of programming and computer science I would like to keep a focus on having strong fundamentals. This desire to have strong fundamentals is what informs my decisions on what to learn and in what order.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"languages\"\u003eLanguages\u003c/h2\u003e\n\u003ch3 id=\"javascript\"\u003eJavaScript\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eMany sources online say you should take either JavaScript or Python as your first language.\u003c/li\u003e\n\u003cli\u003eI like that JavaScript has more of a closeness to C-syntax since C is a high priority on my list of languages to learn.\u003c/li\u003e\n\u003cli\u003eWith JavaScript I can build and interact with the full stack of web development. I can work from browser to server. This means the skills I learn can be applied to more places.\u003c/li\u003e\n\u003cli\u003eJavaScript is thought of having a closeness to Lisp. So this also feeds in to my desire to learn Lisp.\u003c/li\u003e\n\u003cli\u003eIn learning JavaScript I believe it will be easy to crossover into Python. But I don\u0026rsquo;t think it would be as easy the other way around.  In the end, Python being a very important language, I will still get to learning it at some point no matter what.\u003c/li\u003e\n\u003cli\u003eIt\u0026rsquo;s important to really grokk one language. Then it will be easier to pick up the rest because I will actually understand the core principles of programming.\n\u003cul\u003e\n\u003cli\u003eSort of like mastering one key in song writing. Then later it will be easy to pick up the rest of the keys.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eJavaScript works in the browser which means that I can build little applications that can run in browser. No need to download anything.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"lisp-elisp\"\u003eLisp/Elisp\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eI learned lisp because of reading that it will help you to be a better programming. However they also say it shouldn\u0026rsquo;t be your first language.\u003c/li\u003e\n\u003cli\u003eAs a result of learning lisp I was lead towards Emacs\u003c/li\u003e\n\u003cli\u003eEmacs I believe also helps me to be a better programmer\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eAll of the greatest engineers in the world use emacs\u003c/p\u003e","title":"Tech I'm Intersted In"},{"content":"This is some text\n","permalink":"https://mekkamagnus.github.io/posts/find-closest-number-to-zero/","summary":"\u003cp\u003eThis is some text\u003c/p\u003e","title":"Find Closest Number To Zero"},{"content":"Common Lisp has been part of the programming landscape for decades, offering a powerful macro system, dynamic typing, and multi-paradigm flexibility. Despite its strengths, it remains niche compared to more mainstream languages. One of the reasons for this is the challenge of finding comprehensive and accessible educational resources. Better education can attract new developers, retain seasoned ones, and ensure that Common Lisp continues to evolve. Below is an in-depth look at how to improve education for Common Lisp developers, the common obstacles they face, and potential strategies for overcoming those barriers.\nOverview of Common Lisp Common Lisp is a dialect of Lisp standardized in 1994, although its roots stretch back much further. It is renowned for enabling a unique approach to problem-solving, with features like macros that allow developers to manipulate code as data. This flexibility has kept Common Lisp relevant in research contexts and certain specialized industries. However, its syntax, historical tooling, and smaller community can pose hurdles for newcomers.\nWhy Education Matters Education is central to any programming language’s growth. Newcomers need accessible entry points that introduce them to the language’s core concepts. Seasoned developers, on the other hand, benefit from continuous learning resources and advanced tools that refine their expertise. When education is weak or fragmented, adoption rates slow, fewer contributors emerge, and the language risks stagnation.\nPurpose of This Discussion This article explores various goals that can strengthen Common Lisp education, examines the roadblocks that hinder these goals, and suggests concrete solutions. By addressing these challenges, the community and potential stakeholders such as educators, library maintainers, and corporate sponsors can work together to make Common Lisp more accessible and appealing.\nReducing the Learning Curve Many first impressions of Common Lisp focus on its parentheses-heavy syntax. While seasoned developers appreciate Lisp’s elegance and macro power, beginners often find it daunting.\nRoadblocks Complex Syntax: Common Lisp’s dense parentheses and unique style can be off-putting for those used to more conventional syntaxes. Advanced Features: Macros, the Common Lisp Object System (CLOS), and the condition system demand deeper exploration. Limited Beginner Resources: Few modern, up-to-date tutorials or structured courses are available for complete newcomers. Steep Initial Investment: The gap between initial exposure and basic proficiency can feel wide, discouraging learners. Lack of Modern Teaching Techniques: Traditional documentation or older-style tutorials may not resonate with contemporary learning preferences. Potential Solutions Simplified Syntax Explanations: Develop visual aids and interactive examples to demystify parentheses and structure. Hands-On Tutorials: Design guided exercises and projects that walk learners through macros, CLOS, and the condition system. Beginner-Focused Content: Invest in creating comprehensive beginner courses and materials that introduce Common Lisp in an accessible manner. Mentorship Programs: Pair novices with experienced Lisp developers to accelerate learning. Contemporary Formats: Utilize video series, interactive browser-based coding platforms, and short, incremental lessons. Developing Comprehensive Educational Resources Structured courses, books, and tutorials are the backbone of effective language education. Without them, new learners can’t gain a solid foundation, and advanced users struggle to refine their craft.\nRoadblocks Funding Constraints: High-quality educational material development is time-intensive, often requiring monetary support. Limited Expertise: There may be a shortage of experienced educators proficient in Common Lisp to develop comprehensive resources. Fragmented Community Efforts: Contributions from a dispersed community can lead to inconsistent quality and coverage of educational content. Maintenance Challenges: Keeping materials up-to-date with the latest developments and best practices in Common Lisp is resource-intensive. Distribution Barriers: Ensuring that educational resources reach a wide audience requires effective distribution channels, which may be lacking. Potential Solutions Community or Corporate Sponsorship: Pursue grants, sponsorships, or community fundraising to support the creation of high-quality materials. Train and Incentivize Educators: Encourage experienced developers to take on educational roles and provide incentives for creating content. Collaborative Projects: Unite authors, developers, and educators to produce consistent, high-quality tutorials and documentation. Versioning Systems: Use repositories with version control to easily update and refine existing learning materials. Central Promotion: Publicize resources on official websites, social media groups, and community forums. Enhancing Documentation Clear documentation is essential for any successful programming ecosystem. It helps developers navigate libraries, language features, and implementation nuances without constant guesswork.\nRoadblocks Resource Limitations: Improving and expanding documentation requires time and effort that may be scarce among developers who are already managing other responsibilities. Diverse Library Ecosystem: The wide range of libraries and implementations makes it difficult to create standardized, comprehensive documentation. Lack of Incentives: Developers may lack motivation or recognition for contributing to documentation, leading to incomplete or outdated resources. Technical Complexity: Explaining intricate language features and library functionalities in a clear and understandable manner can be challenging. Consistency Issues: Ensuring uniformity in documentation style and depth across different libraries and tools can be difficult to achieve. Potential Solutions Dedicated Documentation Teams: Create dedicated groups focused on improving and maintaining documentation. Standardized Style Guides: Develop and enforce standardized documentation practices to ensure consistency. Community Recognition: Highlight and reward contributors who maintain or improve documentation. Tutorial-Style Documentation: Incorporate examples, step-by-step guides, and real-world use cases. Ongoing Updates: Regularly review and revise documentation to align with new language features or library changes. Centralizing Knowledge A fragmented knowledge base means developers spend too much time searching for solutions or clarifying conflicting information. Centralizing these resources can streamline the learning process.\nRoadblocks Decentralized Community: The Common Lisp community may be spread across various platforms forums, blogs, or niche websites, complicating centralization efforts. Fragmented Information: Content can become duplicated or contradictory, leading to confusion. Resistance to Change: Some may be comfortable with existing platforms and resist adopting a new centralized hub. Technical Barriers: Building and maintaining a well-structured, reliable platform is not trivial. Content Ownership: Deciding who oversees and curates the centralized repository can cause friction. Potential Solutions Unified Platform: Create or adopt a single, well-maintained portal for documentation, tutorials, and community interactions. Community Consensus: Foster community agreement on the importance and benefits of centralization. Robust Infrastructure: Invest in the technical infrastructure needed to support a centralized knowledge base. Structured Curation: Appoint maintainers or a moderation team to keep the repository organized and up-to-date. Integration with Existing Resources: Provide links to or embed external materials, keeping the repository as the central reference point. Improving Onboarding Materials Onboarding materials should help new developers quickly understand the language’s fundamentals, ecosystem norms, and best practices.\nRoadblocks Lack of Standardization: Without a universal onboarding approach, creating uniform and effective materials is difficult. Resource Allocation: Developing high-quality onboarding materials requires dedicated resources that may not be readily available. Engagement Levels: Ensuring that onboarding materials are engaging and effective in retaining new developers can be challenging. Diverse Learning Styles: Catering to different learning preferences and backgrounds requires a variety of onboarding approaches, increasing complexity. Continuous Updates: As the language and its ecosystem evolve, onboarding materials need regular updates to remain relevant and accurate. Potential Solutions Uniform Processes: Define standard onboarding guidelines and materials to ensure consistency. Dedicated Teams: Form groups focused on creating and maintaining onboarding content. Multimedia Content: Combine text, videos, and interactive examples to cater to different learning styles. Active Feedback Loops: Encourage new learners to share their experiences, enabling iterative improvements. Mentoring and Pairing: Connect newcomers with experienced developers who can guide them through initial projects. Fostering Community-Driven Learning A vibrant community can provide mentorship, peer-led workshops, and collaborative resources. When harnessed effectively, it is one of the most powerful drivers of education.\nRoadblocks Coordination Difficulties: Organizing community-driven initiatives such as collaborative tutorials or mentorship programs requires effective coordination, which can be time-consuming. Volunteer Participation: Relying on volunteers for content creation and mentorship can lead to inconsistent participation and quality. Resource Constraints: Providing the necessary tools and platforms for community-driven learning may require resources that are limited. Quality Control: Maintaining high standards for educational content produced by the community can be challenging. Sustainability Issues: Ensuring long-term commitment and involvement from the community to support ongoing learning initiatives is difficult. Potential Solutions Structured Programs: Create organized programs for collaborative content creation and mentorship. Provide Incentives: Offer recognition, rewards, or other incentives to encourage active participation from volunteers. Establish Quality Assurance: Develop processes to review and maintain the quality of community-generated content. Platform Support: Use accessible online forums, chat groups, and video conferencing tools. Long-Term Engagement: Schedule recurring community events monthly meetups to maintain interest. Increasing Accessibility of Learning Tools Accessible learning tools ensure that educational resources are available to a diverse audience, regardless of their location, language, or technological resources.\nRoadblocks Funding Limitations: Developing and maintaining free and accessible learning tools requires financial support that may be scarce. Technical Challenges: Building interactive and user-friendly learning environments involves significant technical expertise and resources. Language Barriers: Providing materials in multiple languages to reach a global audience can be resource-intensive. Internet Accessibility: Ensuring that learning tools are accessible to individuals with varying levels of internet access and technological infrastructure. Device Compatibility: Designing learning tools that work seamlessly across different devices and platforms adds to the complexity. Potential Solutions Seek Sponsorships and Grants: Obtain financial support to fund the development of accessible learning tools. Collaborate with Developers: Work with skilled developers to create multilingual and device-compatible resources. Optimize for Low-Bandwidth: Design tools that function effectively in low-bandwidth environments to reach a broader audience. Promoting Interactive Learning Environments Hands-on experience can accelerate learning more effectively than passive reading. Interactive tools give real-time feedback, which helps developers correct mistakes and reinforce concepts.\nRoadblocks Development Resources: Creating online coding platforms or specialized environments requires significant effort. Maintenance and Support: These tools need regular updates and troubleshooting to remain functional. User Engagement: Designing environments that effectively engage learners and facilitate hands-on practice can be challenging. Curriculum Integration: Aligning interactive lessons with structured learning paths takes planning. Scalability: Ensuring that interactive learning environments can handle a growing number of users without performance degradation is essential. Potential Solutions Partner with Educational Institutions: Collaborate with universities or coding bootcamps to develop or host interactive tools. Implement Scalable Infrastructure: Use cloud-based solutions to ensure that interactive platforms can scale with user demand. Incorporate Gamification: Utilize achievement badges, progress tracking, or competitions to motivate learners. Curriculum Guides: Provide modules or exercises that align with a logical progression of topics. Open Source Development: Encourage community contributions to maintain and improve interactive tools. Supporting Continuous Learning and Development A language’s ecosystem never stands still. Continuous education ensures that developers remain proficient as new libraries, best practices, and platform features emerge.\nRoadblocks Resource Availability: Providing ongoing learning opportunities such as advanced workshops and seminars requires continuous resource allocation. Community Engagement: Sustaining interest and participation in continuous learning initiatives can be difficult. Content Relevance: Keeping advanced learning materials aligned with the latest language developments and industry practices is challenging. Accessibility: Ensuring that continuous learning opportunities are available to all community members, regardless of their location or resources. Feedback Mechanisms: Implementing effective systems for gathering and incorporating feedback to improve offerings requires effort and coordination. Potential Solutions Regular Events: Organize advanced workshops, webinars, and seminars to provide ongoing education opportunities. Iterative Material Updates: Keep learning resources evergreen by addressing feedback and reflecting language developments. Inclusivity: Offer scholarships or free passes for advanced workshops, ensuring developers from all backgrounds can participate. Feedback Loops: Provide channels for continuous feedback to adapt educational content quickly. Mentor Circles: Establish small groups of seasoned developers who can share cutting-edge techniques and discuss emerging libraries. Common Lisp has remarkable potential, thanks to its flexibility, expressive macros, and proven track record in a variety of domains. Yet for many aspiring or even experienced developers, education remains a stumbling block. By reducing the learning curve, creating comprehensive resources, enhancing documentation, centralizing knowledge, improving onboarding, fostering community-driven learning, increasing accessibility of learning tools, promoting interactive environments, and supporting continuous development, the community can pave the way for a stronger, more resilient future.\nAddressing these roadblocks isn’t a one-time effort. It requires sustained collaboration among language maintainers, educators, corporate sponsors, and the global Common Lisp community. Through focused initiatives and shared goals, Common Lisp can broaden its reach, remain relevant in the modern era, and continue providing a powerful paradigm for the next generation of developers.\n","permalink":"https://mekkamagnus.github.io/posts/improving-education-for-common-lisp-developers/","summary":"\u003cp\u003eCommon Lisp has been part of the programming landscape for decades, offering a powerful macro system, dynamic typing, and multi-paradigm flexibility. Despite its strengths, it remains niche compared to more mainstream languages. One of the reasons for this is the challenge of finding comprehensive and accessible educational resources. Better education can attract new developers, retain seasoned ones, and ensure that Common Lisp continues to evolve. Below is an in-depth look at how to improve education for Common Lisp developers, the common obstacles they face, and potential strategies for overcoming those barriers.\u003c/p\u003e","title":"Improving Education for Common Lisp Developers: Goals and Strategies"}]